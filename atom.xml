<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hki</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-24T03:17:44.652Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工厂设计模式实际应用案例</title>
    <link href="http://yoursite.com/2020/04/24/factory/"/>
    <id>http://yoursite.com/2020/04/24/factory/</id>
    <published>2020-04-23T16:00:00.000Z</published>
    <updated>2020-04-24T03:17:44.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式中的工厂模式"><a href="#设计模式中的工厂模式" class="headerlink" title="设计模式中的工厂模式"></a>设计模式中的工厂模式</h1><p>  工厂模式在实际应用中也很常见 各种框架的factory也很多 </p><h2 id="先说说需求"><a href="#先说说需求" class="headerlink" title="先说说需求"></a>先说说需求</h2><p>我们这个项目有一个发送通知的需求</p><p>通知有各种各样的 举几个例子</p><p>手机验证码通知</p><p>项目审批通知</p><p>出函通知</p><p>确认函通知</p><p>会议取消通知</p><p>待处理通知</p><p>… </p><p>发送方式也有很多种</p><p>邮件通知</p><p>短信通知</p><p>微信通知</p><p>钉钉通知</p><p>…</p><p>所以在设计的时候一个合格的通知必须经过三个步骤</p><ol><li>确定发送类型</li><li>确定发送人</li><li>确定发送方式</li></ol><p>我们可以把通知类做成一个factory 专门做通知的发送</p><p>// 2020年修改</p><p>后来我觉得这么设计有点不妥</p><p>改成</p><p>factory 制作各种通知</p><p>由策略模式来负责发送短信</p><p>工厂只负责短信的生产,不负责发送</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口。</p><p>ProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">notice</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">choose</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><p>EIMProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EIMProfessorStrategy</span> <span class="keyword">implements</span> <span class="title">ProfessorStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略了我的筛选策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPDProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPDProfessorStrategy</span> <span class="keyword">implements</span> <span class="title">ProfessorStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//省略了我的筛选策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProfessorStrategy</span> <span class="keyword">implements</span> <span class="title">ProfessorStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//省略了我的筛选策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建一个<em>工厂</em>，生成基于给定信息的实体类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回接口数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> professorStrategy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>   List&lt;SysAttendsModel&gt; <span class="title">find</span><span class="params">(Integer tableId, ProfessorStrategy professorStrategy)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取对应的五个专家</span></span><br><span class="line">        List&lt;Professor&gt; five = professorStrategy.five(tableId);</span><br><span class="line"></span><br><span class="line">        List&lt;SysAttendsModel&gt; sysAttendsModels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sysAttendsModels;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用 <em>find</em> 来查看当它改变策略 <em>Strategy</em> 时的行为变化。</p><p>main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 单据id</span></span><br><span class="line">      <span class="keyword">int</span> tableId = <span class="number">10086</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂牌算法</span></span><br><span class="line">      List&lt;SysAttendsModel&gt; list = find(tableId, <span class="keyword">new</span> EIMProfessorStrategy());</span><br><span class="line">      <span class="comment">// 可转债算法</span></span><br><span class="line">  List&lt;SysAttendsModel&gt; list2 = find(tableId, <span class="keyword">new</span> IPDProfessorStrategy());</span><br><span class="line">      <span class="comment">// 会员算法</span></span><br><span class="line">  List&lt;SysAttendsModel&gt; list2 = find(tableId, <span class="keyword">new</span> IPDProfessorStrategy());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式中的工厂模式&quot;&gt;&lt;a href=&quot;#设计模式中的工厂模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式中的工厂模式&quot;&gt;&lt;/a&gt;设计模式中的工厂模式&lt;/h1&gt;&lt;p&gt;  工厂模式在实际应用中也很常见 各种框架的factory也很多 &lt;/p&gt;

      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/"/>
    
    
  </entry>
  
  <entry>
    <title>权限设计</title>
    <link href="http://yoursite.com/2020/04/14/%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2020/04/14/权限设计/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2020-04-22T08:58:36.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计核心"><a href="#设计核心" class="headerlink" title="设计核心"></a>设计核心</h2><p>每个登录用户拥有各自的权限,由后端返回</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>下文整个权限模式基于RBAC理论设计</p><p>后台验证角色的权限,前端根据后台返回的menuList, permissionList 来设计前端的页面Router</p><p>角色的作用其实只是用来管理分配权限的,真正的验证只验证<strong>权限</strong> </p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库主要包含五张表，分别是<br>用户表 <strong>sys_user</strong> 、<br>角色表 <strong>sys_role</strong> 、<br>用户角色表 <strong>sys_job</strong> 、<br>权限表 <strong>sys_permission</strong> 、<br>角色权限表 <strong>sys_role_permission</strong> 。</p><p>关联关系如下图所示</p><p><img src="/static/权限1.png" alt="权限1"></p><h3 id="数据库表内容及其含义"><a href="#数据库表内容及其含义" class="headerlink" title="数据库表内容及其含义"></a>数据库表内容及其含义</h3><h4 id="运营后台用户表"><a href="#运营后台用户表" class="headerlink" title="运营后台用户表"></a>运营后台用户表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角色ID'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span>,</span><br><span class="line">  <span class="string">`delete_status`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效  1有效  2无效'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'管理员手机号'</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'1:流程管理用户 2：管理员或者超级管理员'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10089</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'运营后台用户表'</span>;</span><br></pre></td></tr></table></figure><h4 id="用户的组织角色和岗位信息"><a href="#用户的组织角色和岗位信息" class="headerlink" title="用户的组织角色和岗位信息"></a>用户的组织角色和岗位信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_job`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'id'</span>,</span><br><span class="line">  <span class="string">`org_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'组织id'</span>,</span><br><span class="line">  <span class="string">`job_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'表单id'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`delete_status`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效 1有效     2无效'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户关联组的角色'</span>,</span><br><span class="line">  <span class="string">`claim_type`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'认领类型 1：可以认领任务 2：不能认领任务'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1084</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'判断用户的组织和岗位'</span>;</span><br></pre></td></tr></table></figure><h4 id="后台角色表"><a href="#后台角色表" class="headerlink" title="后台角色表"></a>后台角色表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色类型'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名'</span>,</span><br><span class="line">  <span class="string">`flow_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'流程角色id'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`delete_status`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效  1有效  2无效'</span>,</span><br><span class="line">  <span class="string">`note`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">47</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ROW_FORMAT=<span class="keyword">COMPACT</span> <span class="keyword">COMMENT</span>=<span class="string">'后台角色表'</span>;</span><br></pre></td></tr></table></figure><h4 id="后台权限表"><a href="#后台权限表" class="headerlink" title="后台权限表"></a>后台权限表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_permission`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'自定id,主要供前端展示权限列表分类排序使用.'</span>,</span><br><span class="line">  <span class="string">`menu_code`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'归属菜单,前端判断并展示菜单使用,'</span>,</span><br><span class="line">  <span class="string">`menu_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'菜单的中文释义'</span>,</span><br><span class="line">  <span class="string">`permission_code`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'权限的代码/通配符,对应代码中@RequiresPermissions 的value'</span>,</span><br><span class="line">  <span class="string">`permission_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'本权限的中文释义'</span>,</span><br><span class="line">  <span class="string">`required_permission`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'2'</span> <span class="keyword">COMMENT</span> <span class="string">'是否本菜单必选权限, 1.必选 2非必选 通常是"列表"权限是必选'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'后台权限表'</span>;</span><br></pre></td></tr></table></figure><h4 id="角色-权限关联表"><a href="#角色-权限关联表" class="headerlink" title="角色-权限关联表"></a>角色-权限关联表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_role_permission`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色id'</span>,</span><br><span class="line">  <span class="string">`permission_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限id'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`delete_status`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效 1有效 2无效'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">20</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'角色-权限关联表'</span>;</span><br></pre></td></tr></table></figure><h2 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h2><h3 id="用户配置岗位信息"><a href="#用户配置岗位信息" class="headerlink" title="用户配置岗位信息"></a>用户配置岗位信息</h3><p>举例: 固收分管领导及总裁 账号是 admin11 关联的岗位job信息是1015</p><p>岗位信息包含当前系统中所有的岗位</p><p><img src="/static/image-20200414163259757.png" alt="image-20200414163259757"></p><h3 id="岗位信息关联角色"><a href="#岗位信息关联角色" class="headerlink" title="岗位信息关联角色"></a>岗位信息关联角色</h3><p>当前系统所有的角色信息</p><p>固收分管领导及总裁 流程角色id是user88 角色id是 <strong>39</strong></p><p><img src="/static/image-20200414165633387.png" alt="image-20200414165633387"></p><h3 id="给角色对应的权限"><a href="#给角色对应的权限" class="headerlink" title="给角色对应的权限"></a>给角色对应的权限</h3><p>当前角色对应权限表中的某些权限</p><p>固收分管领导及总裁的角色id是39 所以需要给role_id配置不同的权限.</p><p>下面配置了4个权限,具体权限内容可以在权限表中查看</p><p><img src="/static/image-20200414165858964.png" alt="image-20200414165858964"></p><h3 id="配置所有的权限列表"><a href="#配置所有的权限列表" class="headerlink" title="配置所有的权限列表"></a>配置所有的权限列表</h3><p>存储系统中不同粒度的权限</p><p>包含但不止</p><p><img src="/static/image-20200414162424318.png" alt="image-20200414162424318"></p><p>其中如果想要分配子权限必须拥有顶级权限</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>最后: </p><ul><li>如何一个账号对应多个第三方系统的角色</li></ul><p>有两种解决方案</p><ol><li><p>理论上来讲它也是当前系统中的一种权限,所以把它加到系统权限表中,之后配置角色的时候来添加不同的第三方角色</p></li><li><p>如果你觉得第一种比较麻烦,可以在你当前系统的角色表中添加一个第三方系统角色的ID来标识,这样有一个缺点就是无法添加多个角色,不过也有解决办法,就是新建一张表来维护与第三方的角色关系.</p></li></ol><ul><li>角色继承的问题</li></ul><p>一个user对应多个岗位</p><p>一个岗位对应一个角色</p><p>延伸</p><p>可以在用户user和岗位job两个表中间添加一个关联表</p><p>用户和岗位关联起来</p><p>岗位是初始化指定角色权限的个人岗位job </p><p>初始化的时候角色和岗位是一对一的  </p><p>后期添加操作修改权限是针对岗位来操作的</p><p>举个例子 </p><p>张三是程序员岗位的角色后来申请可以操作DB的权限</p><p> 在数据库中是<strong>张三这个岗位可以操作DB 并不是程序员这个角色可以操作DB</strong></p><p>上面这种架构系统对继承角色非常麻烦, 要么循环当前角色来继承他的权限,要么多维护一张表.或者可以读下关于RBAC3的继承逻辑.</p><p>RBAC参考文献</p><p><a href="http://csrc.nist.gov/groups/SNS/rbac/index.html" target="_blank" rel="noopener">http://csrc.nist.gov/groups/SNS/rbac/index.html</a></p><p><a href="http://csrc.nist.gov/groups/SNS/rbac/faq.html" target="_blank" rel="noopener">http://csrc.nist.gov/groups/SNS/rbac/faq.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计核心&quot;&gt;&lt;a href=&quot;#设计核心&quot; class=&quot;headerlink&quot; title=&quot;设计核心&quot;&gt;&lt;/a&gt;设计核心&lt;/h2&gt;&lt;p&gt;每个登录用户拥有各自的权限,由后端返回&lt;/p&gt;
&lt;h3 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈jvm</title>
    <link href="http://yoursite.com/2020/04/10/jvm/"/>
    <id>http://yoursite.com/2020/04/10/jvm/</id>
    <published>2020-04-09T16:00:00.000Z</published>
    <updated>2020-04-22T10:04:03.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GC的基础知识"><a href="#GC的基础知识" class="headerlink" title="GC的基础知识"></a>GC的基础知识</h3><h4 id="1-什么是垃圾"><a href="#1-什么是垃圾" class="headerlink" title="1.什么是垃圾"></a>1.什么是垃圾</h4><p>简单来讲<strong>没有任何引用指向的一个对象或者多个对象（循环引用）就是垃圾.</strong></p><p>引用又分为强引用，软引用，弱引用，虚引用。 </p><ul><li>强引用（Strong Reference）：这类引用是Java程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象,当内存不够的时候只会抛出OOM异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object  obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><ul><li>软引用（Soft Reference）：它用来描述一些可能还有用，但并非必须的对象。在<strong>系统内存不够用时</strong>，这类引用关联的对象将被垃圾收集器回收。JDK1.2之后提供了SoftReference类来实现软引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SoftReference  soft = <span class="keyword">new</span> SoftReference(user);</span><br></pre></td></tr></table></figure><ul><li>弱引用（Weak Reference）：它也是用来描述非须对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，<strong>无论当前内存是否足够，都会回收掉</strong>只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用。</li></ul><ul><li>虚引用（Phantom Reference）：最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的<strong>是希望能在这个对象被收集器回收时收到一个系统通知</strong>。JDK1.2之后提供了PhantomReference类来实现虚引用。</li></ul><h4 id="2-如何寻找垃圾"><a href="#2-如何寻找垃圾" class="headerlink" title="2.如何寻找垃圾"></a>2.如何寻找垃圾</h4><ol><li><p>引用计数</p><p>java没有在用这种算法,它需要单独维护一个引用计数器 目前OkHttp,netty在用故不在本章节讨论范围.</p></li><li><p>根可达算法</p></li></ol><p>所谓根集(Root Set)就是正在执行的Java程序可以访问的引用变量（注意：不是对象）的集合(包括局 部变量、参数、类变量)，程序可以使用引用变量访问对象的属性和调用对象的方法。</p><p> 这种算法的基本思路：</p><p>（1）通过一系列名为“GC Roots”的对象作为起始点，寻找对应的引用节点。</p><p>（2）找到这些引用节点后，从这些节点开始向下继续寻找它们的引用节点。 </p><p>（3）重复（2）。</p><p>（4）搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。</p><p>常见的根节点(起始点)<br>（1）虚拟机栈中引用的对象（栈帧中的本地变量表）；<br>（2）方法区中的常量引用的对象；final 常量名=值;<br>（3）方法区中的类静态属性引用的对象 static；<br>（4）本地方法栈中JNI（Native方法）的引用对象。<br>（5）活跃线程。</p><p>在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><p>1.如果对象在进行根搜索后发现没有与GC Roots相连接的引用链，那它会被第一次标记并且进行一次筛选。筛选的条件是此对象是否有必要执行 finalize（）方法。当对象没有覆盖finalize（）方法，或finalize（）方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。</p><p>2.如果该对象被判定为有必要执行finalize（）方法，那么这个对象将会被放置在一个名为F-Queue队列中，并在稍后由一条由虚拟机自动建立的、低优先级的Finalizer线程去执行finalize（）方法。finalize（）方法是对象逃脱死亡命运的最后一次机会（因为一个对象的finalize（）方法最多只会被系统自动调用一次），稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果要在finalize（）方法中成功拯救自己，只要在finalize（）方法中让该对象重新引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。</p><h4 id="3-常见的垃圾回收算法"><a href="#3-常见的垃圾回收算法" class="headerlink" title="3.常见的垃圾回收算法"></a>3.常见的垃圾回收算法</h4><ol><li>标记清除 - 位置不连续 产生碎片</li><li>拷贝算法 - 没有碎片，浪费空间</li><li>标记压缩 - 没有碎片，效率偏低</li></ol><h4 id="4-JVM内存分代模型（用于分代垃圾回收算法）"><a href="#4-JVM内存分代模型（用于分代垃圾回收算法）" class="headerlink" title="4.JVM内存分代模型（用于分代垃圾回收算法）"></a>4.JVM内存分代模型（用于分代垃圾回收算法）</h4><ol><li><p>新生代 + 老年代 + 永久代（1.7）/ 元数据区(1.8) Metaspace</p><ol><li>永久代 元数据 - Class</li><li>永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li><li>字符串常量 1.7 - 永久代，1.8 - 堆</li><li>MethodArea逻辑概念 - 永久代、元数据</li></ol></li><li><p>新生代 = Eden + 2个suvivor区 </p><ol><li>YGC回收之后，大多数的对象会被回收，活着的进入 s0</li><li>再次YGC，活着的对象eden + s0 -&gt; s1</li><li>再次YGC，eden + s1 -&gt; s0</li><li>年龄足够 -&gt; 老年代 （15 CMS 6）</li><li>suvivor区装不下 -&gt; 老年代</li></ol></li><li><p>老年代</p><ol><li>顽固分子</li><li>老年代满了FGC Full GC</li></ol></li><li>GC Tuning (Generation)<ol><li>尽量减少FGC</li><li>MinorGC = YGC</li><li>MajorGC = FGC</li></ol></li></ol><h4 id="5-常见的垃圾回收器"><a href="#5-常见的垃圾回收器" class="headerlink" title="5.常见的垃圾回收器"></a>5.常见的垃圾回收器</h4><ol><li>Serial 年轻代 串行回收</li><li>PS 年轻代 并行回收</li><li>ParNew 年轻代 配合CMS的并行回收</li><li>SerialOld </li><li>ParallelOld</li><li>ConcurrentMarkSweep 老年代 并发的， 垃圾回收和应用程序同时运行，降低STW的时间(200ms)</li><li>G1(10ms)</li><li>ZGC (1ms) PK C++</li><li>Shenandoah</li><li>Eplison</li></ol><p>1.8默认的垃圾回收：PS + ParallelOld</p><h4 id="6-JVM调优第一步，了解生产环境下的垃圾回收器组合"><a href="#6-JVM调优第一步，了解生产环境下的垃圾回收器组合" class="headerlink" title="6.JVM调优第一步，了解生产环境下的垃圾回收器组合"></a>6.JVM调优第一步，了解生产环境下的垃圾回收器组合</h4><h3 id="jvm运行时数据分析"><a href="#jvm运行时数据分析" class="headerlink" title="jvm运行时数据分析"></a>jvm运行时数据分析</h3><p>在区域中一般分为五块</p><h4 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h4><ol><li><p>计数器<br> 通过改变这个计数器的值来获取下一条需要执行的字节码,包括判断<br> 循环,跳转,异常处理</p><ol start="2"><li><p>方法区(method Area)</p><p> 该区域用来存放我们生成的各种对象信息</p></li></ol></li></ol><ol start="3"><li><p>虚拟机栈(VM stack)<br> 每个类 都会在执行的时候创建一个栈帧(javap -c -s xxx.class)来存放关于这个类的所有信息.<br> 包括方法内的局部变量,以及各种操作帧数, 动态链接(各种引用)及方法的出口返回值等等。每个方法的调用到结束意味着虚拟机的栈桢的入栈到出栈,</p></li><li><p>堆(heap)<br> 在遇到new指令后 我们会根据相对应的内存引用 来找如果有就引用  没有的话就执行类加载 Java 类加载过程那一套东西</p></li><li><p>本地方法栈(native mathod stack)<br> 存放本地原生调用方法和虚拟机栈一样只不过内容是原生计算机内的C方法native是与C++联合开发的时候用的 所以一般开发不会用到</p></li></ol><p>前面在堆中说了类引用会检查是否已经加载过当前需要的类 </p><p>如果没有加载则会去加载 那么类的加载过程就是下面要说的</p><p>当程序用到某个类但这个类还没有加载到内存中,jvm会通过加载,连接,初始化来对这个类进行初始化</p><ol><li>加载</li></ol><p>jvm通过类的全类名来获取字节流 (也就是.class文件) 然后根据字节流创建class对象  创建完成后写入到内存中,然后放在运行时区域的方法区内(method Area)  然后在堆(heap)中创建出对应的Class对象</p><ol start="2"><li>链接</li></ol><p>分为三部分 </p><p>验证语法  满足jvm虚拟机规范 </p><p>准备阶段  为类的静态static 分配内存 设置默认值</p><p>解析阶段  将符号引用替换为内存引用(直接引用)</p><ol start="3"><li>初始化</li></ol><p>将static修饰的方法或者变量进行初始化,如果有父级引用优先加载父类 </p><p>那么这个类的加载机制又是什么 它是通过什么来加载的</p><p>采用的双亲委派机制</p><p>当加载某个类的时候先去询问父类节点是否可以加载 </p><p>这样既避免了重复加载也防止了注入还提高了效率</p><h3 id="常见垃圾回收器组合参数设定：-1-8"><a href="#常见垃圾回收器组合参数设定：-1-8" class="headerlink" title="常见垃圾回收器组合参数设定：(1.8)"></a>常见垃圾回收器组合参数设定：(1.8)</h3><ul><li><p>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old</p><ul><li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li></ul></li><li>-XX:+UseParNewGC = ParNew + SerialOld<ul><li>这个组合已经很少用（在某些版本中已经废弃）</li><li><a href="https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future" target="_blank" rel="noopener">https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future</a></li></ul></li><li>-XX:+UseConc<font color="red">(urrent)</font>MarkSweepGC = ParNew + CMS + Serial Old</li><li>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</li><li>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</li><li>-XX:+UseG1GC = G1</li><li><p>Linux中没找到默认GC的查看方法，而windows中会打印UseParallelGC </p><ul><li>java +XX:+PrintCommandLineFlags -version</li><li>通过GC的日志来分辨</li></ul></li><li><p>Linux下1.8版本默认的垃圾回收器到底是什么？</p><ul><li>1.8.0_181 默认（看不出来）Copy MarkCompact</li><li>1.8.0_222 默认 PS + PO</li></ul></li></ul><p>  java -XX:+PrintFlagsWithComments //只有debug版本能用</p><ul><li><p>JVM的命令行参数参考：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></li><li><p>JVM参数分类</p><blockquote><p>标准： - 开头，所有的HotSpot都支持</p><p>非标准：-X 开头，特定版本HotSpot支持特定命令</p><p>不稳定：-XX 开头，下个版本可能取消</p></blockquote><p>-XX:+PrintCommandLineFlags </p><p>-XX:+PrintFlagsFinal 最终参数值</p><p>-XX:+PrintFlagsInitial 默认参数值</p></li></ul><h3 id="PS-GC日志详解"><a href="#PS-GC日志详解" class="headerlink" title="PS GC日志详解"></a>PS GC日志详解</h3><p>每种垃圾回收器的日志格式是不同的！</p><p>PS日志格式</p><p><img src="./GC日志详解.png" alt="GC日志详解"></p><p>heap dump部分：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eden space <span class="number">5632</span>K, <span class="number">94</span>% used [<span class="number">0</span>x00000000ff980000,<span class="number">0</span>x00000000ffeb3e28,<span class="number">0</span>x00000000fff00000)</span><br><span class="line">                            后面的内存地址指的是，起始地址，使用空间结束地址，整体空间结束地址</span><br></pre></td></tr></table></figure><p><img src="GCHeapDump.png" alt="GCHeapDump"></p><p>total = eden + 1个survivor</p><h3 id="调优前的基础概念："><a href="#调优前的基础概念：" class="headerlink" title="调优前的基础概念："></a>调优前的基础概念：</h3><ol><li>吞吐量：用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li><li>响应时间：STW越短，响应时间越好</li></ol><p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p><p>问题：</p><p>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）</p><p>响应时间：网站 GUI API （1.8 G1）</p><h3 id="什么是调优？"><a href="#什么是调优？" class="headerlink" title="什么是调优？"></a>什么是调优？</h3><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢，卡顿）</li><li>解决JVM运行过程中出现的各种问题(OOM)</li></ol><h3 id="调优，从规划开始"><a href="#调优，从规划开始" class="headerlink" title="调优，从规划开始"></a>调优，从规划开始</h3><ul><li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p></li><li><p>无监控（压力测试，能看到结果），不调优</p></li><li><p>步骤：</p><ol><li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol><li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li><li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li></ol></li><li>选择回收器组合</li><li>计算内存需求（经验值 1.5G 16G）</li><li>选定CPU（越高越好）</li><li>设定年代大小、升级年龄</li><li>设定日志参数<ol><li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li><li>或者每天产生一个日志文件</li></ol></li><li>观察日志情况</li></ol></li></ul><p>思维导图 查看地址:</p><p><a href="https://www.processon.com/embed/5e902d83e401fd32b82a99c2" target="_blank" rel="noopener">https://www.processon.com/embed/5e902d83e401fd32b82a99c2</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blogs.oracle.com/jonthecollector/our-collectors" target="_blank" rel="noopener">https://blogs.oracle.com/ </a><a href="https://blogs.oracle.com/jonthecollector/our-collectors" target="_blank" rel="noopener">jonthecollector</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors" target="_blank" rel="noopener">/our-collectors</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li><li><a href="http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp" target="_blank" rel="noopener">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></li><li>GC和GC Tuning</li><li>《深入理解JVM虚拟机》</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GC的基础知识&quot;&gt;&lt;a href=&quot;#GC的基础知识&quot; class=&quot;headerlink&quot; title=&quot;GC的基础知识&quot;&gt;&lt;/a&gt;GC的基础知识&lt;/h3&gt;&lt;h4 id=&quot;1-什么是垃圾&quot;&gt;&lt;a href=&quot;#1-什么是垃圾&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>redis-bitmap</title>
    <link href="http://yoursite.com/2020/04/03/redis-bitmap/"/>
    <id>http://yoursite.com/2020/04/03/redis-bitmap/</id>
    <published>2020-04-02T16:00:00.000Z</published>
    <updated>2020-04-07T07:26:11.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-BitMap-是什么"><a href="#1-BitMap-是什么" class="headerlink" title="1. BitMap 是什么"></a>1. BitMap 是什么</h1><p>在redis中可以设置用一个bit的位置来标识某个元素的0-1状态, </p><p>具体的操作指令是  指定某个key的offset的0或者1的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT key offset value</span><br></pre></td></tr></table></figure><p>计算某个key的被设置为 <code>1</code> 的比特位的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT key [start end]</span><br></pre></td></tr></table></figure><h1 id="2-BitMap-怎么用"><a href="#2-BitMap-怎么用" class="headerlink" title="2. BitMap 怎么用"></a>2. BitMap 怎么用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置reids的bitmap位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset 根据需求设置long int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">setBit</span><span class="params">(String key,<span class="keyword">int</span> offset, Boolean value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;) con -&gt; con.setBit(key.getBytes(),(<span class="keyword">long</span>)offset,value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计key的所有1值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">bitCount</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BitMap-什么时候用"><a href="#3-BitMap-什么时候用" class="headerlink" title="3. BitMap 什么时候用"></a>3. BitMap 什么时候用</h1><ul><li><h2 id="短信验证一分钟不能发送5次"><a href="#短信验证一分钟不能发送5次" class="headerlink" title="短信验证一分钟不能发送5次"></a>短信验证一分钟不能发送5次</h2></li></ul><h3 id="之前我们的做法"><a href="#之前我们的做法" class="headerlink" title="之前我们的做法"></a>之前我们的做法</h3><p>调用reids的increment方法来自增完成需求</p><h3 id="现在我们的做法"><a href="#现在我们的做法" class="headerlink" title="现在我们的做法"></a>现在我们的做法</h3><p>将当前用户当做key ,拿到当前分钟的毫秒数做offset,最后用bitcount来统计用户在当前分钟数访问次数.</p><ul><li><h2 id="记录用户当前是否在线"><a href="#记录用户当前是否在线" class="headerlink" title="记录用户当前是否在线"></a>记录用户当前是否在线</h2></li></ul><h3 id="之前我们的做法-1"><a href="#之前我们的做法-1" class="headerlink" title="之前我们的做法"></a>之前我们的做法</h3><p>我们需要在数据库字段里标志处是否离线</p><h3 id="现在我们的做法-1"><a href="#现在我们的做法-1" class="headerlink" title="现在我们的做法"></a>现在我们的做法</h3><p>找到我们需要的key, 拿用户id做offset,最后我们标记出是否在线 还可以统计当前在线总人数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-BitMap-是什么&quot;&gt;&lt;a href=&quot;#1-BitMap-是什么&quot; class=&quot;headerlink&quot; title=&quot;1. BitMap 是什么&quot;&gt;&lt;/a&gt;1. BitMap 是什么&lt;/h1&gt;&lt;p&gt;在redis中可以设置用一个bit的位置来标识某个元素的
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="redis" scheme="http://yoursite.com/categories/java/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA远程调试</title>
    <link href="http://yoursite.com/2020/02/25/ideaDebug/"/>
    <id>http://yoursite.com/2020/02/25/ideaDebug/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2020-04-07T07:54:08.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="远程debug是什么"><a href="#远程debug是什么" class="headerlink" title="远程debug是什么 ?"></a>远程debug是什么 ?</h2><p>远程debug 原理是利用服务器端口监听来触发本地开发工具IDEA的一种调试手段 </p><h2 id="什么情况下会用到"><a href="#什么情况下会用到" class="headerlink" title="什么情况下会用到 ?"></a>什么情况下会用到 ?</h2><p>一般我们本地调试的话会直接在代码中打断点然后debug模式运行代码就可以调试了.</p><p>但是我们在实际开发中会遇到一些比较复杂的问题我举几个例子</p><ol><li><p>涉及到调用生产环境会出现的网络问题.</p></li><li><p>本地运行没问题,只有在测试服务器或者生产环境会出现报错</p></li><li><p>因为开发系统和服务器系统不一致导致的问题</p></li></ol><p>等等类似这样的问题我们在本地就没办法调试,这时候就需要用到远程服务器调试了.</p><h2 id="如何使用远程服务器调试"><a href="#如何使用远程服务器调试" class="headerlink" title="如何使用远程服务器调试"></a>如何使用远程服务器调试</h2><p>远程调试主要有以下几个步骤</p><ul><li><p>在调试之前我们需要你本地的代码和远程的代码要保持一致</p></li><li><p>部署上去之后需要加上特定的参数来启动 </p></li><li><p>服务器启动之后在启动本地环境</p></li></ul><p>保持一致就不需要我们详细说了,部署最新版的就可以了.</p><p>接下来我们来加上启动参数</p><p>原来启动jar包需要的命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure></p><p>如果是远程debug 则需要加上一些参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4001 xxx.jar</span><br></pre></td></tr></table></figure></p><p>这个参数在idea里可以直接获取到</p><p>接下来我们去找如何获取debug参数</p><blockquote><p>菜单 -&gt; Run -&gt; Edit Configurations…</p></blockquote><p><img src="/img/git1.png" alt="img"></p><blockquote><p>在debug Configurations的弹出框里添加一个remote</p></blockquote><p><img src="/img/git2.png" alt="img"></p><blockquote><p>之后会弹出一个如下图所示的界面 我们需要配置两个地方.图中的1是我们的服务器地址和端口,端口我们一般默认为4001.也可以自己配置.2是我们需要调试的项目.当这两个配置好后3的位置就会自动生成我们需要的启动参数</p></blockquote><p><img src="/img/a.png" alt="img"></p><blockquote><p>之后启动jar的时候添加上 服务器启动好后 在启动本地的remote</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>当发现启动报错 首先检查下你的命令 不要直接复制我的 看你自己生成的代码</li><li>保证端口没被占用</li><li>本地启动remote会发送请求连接服务器 如果本机无法连接服务器也不行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;远程debug是什么&quot;&gt;&lt;a href=&quot;#远程debug是什么&quot; class=&quot;headerlink&quot; title=&quot;远程debug是什么 ?&quot;&gt;&lt;/a&gt;远程debug是什么 ?&lt;/h2&gt;&lt;p&gt;远程debug 原理是利用服务器端口监听来触发本地开发工具IDEA的
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>策略设计模式实际应用案例</title>
    <link href="http://yoursite.com/2020/01/18/strategy/"/>
    <id>http://yoursite.com/2020/01/18/strategy/</id>
    <published>2020-01-17T16:00:00.000Z</published>
    <updated>2020-04-24T03:15:28.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式中的策略模式"><a href="#设计模式中的策略模式" class="headerlink" title="设计模式中的策略模式"></a>设计模式中的策略模式</h1><p> 讲理论的话网上有很多现成的 以前也看了不少 这次特地在实际项目中抽取出来做成笔记</p><h2 id="先说说需求"><a href="#先说说需求" class="headerlink" title="先说说需求"></a>先说说需求</h2><p>根据不同的单据类型选出选出五个教授</p><p>其中单据类型有可转债和挂牌两大类 目前可转债和挂牌各有几种选择方式 下面案例我一样拿出一种来</p><p>之前的模式在有多种策略选择相似的情况下，使用 if…else 复杂和难以维护,代码阅读起来也比较困难</p><p>现在使用策略模式的步骤及简化结果 </p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个接口。</p><p>ProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProfessorStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>创建实现接口的实体类。</p><p>EIMProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EIMProfessorStrategy</span> <span class="keyword">implements</span> <span class="title">ProfessorStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略了我的筛选策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPDProfessorStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPDProfessorStrategy</span> <span class="keyword">implements</span> <span class="title">ProfessorStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//省略了我的筛选策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserStrategy</span> <span class="keyword">implements</span> <span class="title">ProfessorStrategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Professor&gt; <span class="title">five</span><span class="params">(Integer tableId)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//省略了我的筛选策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>创建具体的 <em>find</em> 方法, 你也可以创建一个有泛型的类来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回接口数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> professorStrategy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>   List&lt;SysAttendsModel&gt; <span class="title">find</span><span class="params">(Integer tableId, ProfessorStrategy professorStrategy)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取对应的五个专家</span></span><br><span class="line">        List&lt;Professor&gt; five = professorStrategy.five(tableId);</span><br><span class="line"></span><br><span class="line">        List&lt;SysAttendsModel&gt; sysAttendsModels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sysAttendsModels;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h3><p>使用 <em>find</em> 来查看当它改变策略 <em>Strategy</em> 时的行为变化。</p><p>main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 单据id</span></span><br><span class="line">      <span class="keyword">int</span> tableId = <span class="number">10086</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂牌算法</span></span><br><span class="line">      List&lt;SysAttendsModel&gt; list = find(tableId, <span class="keyword">new</span> EIMProfessorStrategy());</span><br><span class="line">      <span class="comment">// 可转债算法</span></span><br><span class="line">  List&lt;SysAttendsModel&gt; list2 = find(tableId, <span class="keyword">new</span> IPDProfessorStrategy());</span><br><span class="line">      <span class="comment">// 会员算法</span></span><br><span class="line">  List&lt;SysAttendsModel&gt; list2 = find(tableId, <span class="keyword">new</span> UserStrategy());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2><p>讲讲上面的代码 </p><p>大概就和支付策略是一个逻辑</p><p><strong>支付前都需要找出二维码</strong></p><p><strong>支付后都需要查看是否到账</strong></p><p>中间走具体的 现金 or 微信支付 or 支付宝支付 我们不关心</p><p>不管后面有多少个支付手段我们就加上相对应的接口的实体类就行了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式中的策略模式&quot;&gt;&lt;a href=&quot;#设计模式中的策略模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式中的策略模式&quot;&gt;&lt;/a&gt;设计模式中的策略模式&lt;/h1&gt;&lt;p&gt; 讲理论的话网上有很多现成的 以前也看了不少 这次特地在实际项目中抽取出来做
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/java/"/>
    
    
  </entry>
  
  <entry>
    <title>外部jar包打包方式</title>
    <link href="http://yoursite.com/2020/01/02/jarOpinize/"/>
    <id>http://yoursite.com/2020/01/02/jarOpinize/</id>
    <published>2020-01-01T16:00:00.000Z</published>
    <updated>2020-04-01T03:22:43.132Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>将原本 jar 包解压缩找到 BOOT-INF 下的 lib ,该目录下包含当前项目中用到的所有 jar包 ,复制出来放到jar包启动位置</p></li><li><p>在 pom 中 spring-boot-maven-plugin 打包插件设置打包时排除所有 jar 包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;</span><br><span class="line">                &lt;!-- 排除所有Jar --&gt;</span><br><span class="line">                &lt;groupId&gt;nothing&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;nothing&lt;/artifactId&gt;</span><br><span class="line">            &lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p>这个时候需要在jar包启动参数上添加一个 -Dloader.path</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dloader.path=&quot;lib/&quot; -jar test.jar</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;将原本 jar 包解压缩找到 BOOT-INF 下的 lib ,该目录下包含当前项目中用到的所有 jar包 ,复制出来放到jar包启动位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 pom 中 spring-boot-maven-plugin 打包插件设置打包
      
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>linux语法操作</title>
    <link href="http://yoursite.com/2019/12/28/shell/"/>
    <id>http://yoursite.com/2019/12/28/shell/</id>
    <published>2019-12-27T16:00:00.000Z</published>
    <updated>2020-04-08T06:44:19.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gt-File"><a href="#gt-File" class="headerlink" title="&gt;File"></a>&gt;File</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls       </span><br><span class="line">ll     </span><br><span class="line">ls -l  </span><br><span class="line">ll -rt</span><br></pre></td></tr></table></figure><h1 id="gt-shell-base"><a href="#gt-shell-base" class="headerlink" title="&gt;shell base"></a>&gt;shell base</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+w:删除光标前面的单词的字符</span><br><span class="line">Ctrl – a ：移到行首</span><br><span class="line">Ctrl – e ：移到行尾</span><br><span class="line">esc - f  : 前移一个词</span><br><span class="line">esc - b:  后移一个词</span><br></pre></td></tr></table></figure><p>创建文件用touch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：touch [1.txt]</span><br></pre></td></tr></table></figure></p><p>删除文件用rm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：rm -f [1.txt]</span><br></pre></td></tr></table></figure></p><p>创建目录用mkdir<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：mkdir [xxx]     &#123; -p 参数来创建多级文件夹 &#125;</span><br></pre></td></tr></table></figure></p><p>删除空目录用rmdir<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：rmdir [xxx]（有东西的目录不能删）</span><br></pre></td></tr></table></figure></p><p>打开文件    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi  vim open cat more less</span><br></pre></td></tr></table></figure><p>批量创建    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p nginxdb/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure><h1 id="gt-删除"><a href="#gt-删除" class="headerlink" title="&gt;删除"></a>&gt;删除</h1><p>删除装有东西的目录就用</p><figure class="highlight plain"><figcaption><span>-rfi 例如rm -rfi [XXX]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i是为了提醒 最好加上</span><br></pre></td></tr></table></figure><h1 id="gt-查看"><a href="#gt-查看" class="headerlink" title="&gt;查看"></a>&gt;查看</h1><p>文件末尾<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tail -20 [filename]</span><br><span class="line"># &gt;经常查看日志需要用到这个</span><br><span class="line">tail -f xxx.log -n100</span><br></pre></td></tr></table></figure></p><p>重新命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mv [old.text] [new.text]</span><br></pre></td></tr></table></figure></p><h1 id="gt-杀死进程"><a href="#gt-杀死进程" class="headerlink" title="&gt;杀死进程"></a>&gt;杀死进程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kill [pid]</span><br></pre></td></tr></table></figure><p>pkill和阿里源码里学的<br>直接删除程序对应的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -f zwkj-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p><h1 id="gt-权限赋予"><a href="#gt-权限赋予" class="headerlink" title="&gt;权限赋予"></a>&gt;权限赋予</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chmod -R 777 [目录]</span><br><span class="line">建议了解下 linux权限的 0124 组成 这样就知道777怎么来的</span><br><span class="line">chown apple/staff xxx</span><br></pre></td></tr></table></figure><h1 id="gt-解压"><a href="#gt-解压" class="headerlink" title="&gt;解压"></a>&gt;解压</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">zip all.zip *.jpg</span><br><span class="line"></span><br><span class="line">unzip all.zip</span><br></pre></td></tr></table></figure><h1 id="gt-Grep-管道查询"><a href="#gt-Grep-管道查询" class="headerlink" title="&gt;Grep 管道查询"></a>&gt;Grep 管道查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-A num：匹配到搜索到的行以及该行下面的num行</span><br><span class="line">  </span><br><span class="line">-B num：匹配到搜索到的行以及该行上面的num行</span><br><span class="line"></span><br><span class="line">-C num：匹配到搜索到的行以及上下各num行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep -E -B 1  &apos;use time:&apos; /data/home/zhxt/zhxt-test/logs/test.log</span><br><span class="line"></span><br><span class="line">ls | grep &apos;.docx&apos;</span><br><span class="line"></span><br><span class="line">ls | grep a*   (a 开头的)</span><br><span class="line"></span><br><span class="line">ls | grep &apos;a*&apos;  (包含a的)</span><br><span class="line"></span><br><span class="line">https://www.cnblogs.com/kongzhongqijing/articles/4462793.html</span><br></pre></td></tr></table></figure><h1 id="gt-查看历史输入的命令"><a href="#gt-查看历史输入的命令" class="headerlink" title="&gt;查看历史输入的命令"></a>&gt;查看历史输入的命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.bash_history</span><br><span class="line"></span><br><span class="line">history | head -20</span><br></pre></td></tr></table></figure><h1 id="gt-查看执行文件的路径"><a href="#gt-查看执行文件的路径" class="headerlink" title="&gt;查看执行文件的路径"></a>&gt;查看执行文件的路径</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br></pre></td></tr></table></figure><h1 id="gt-读取文件"><a href="#gt-读取文件" class="headerlink" title="&gt;读取文件"></a>&gt;读取文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat [filename]</span><br></pre></td></tr></table></figure><h1 id="gt-查询文件"><a href="#gt-查询文件" class="headerlink" title="&gt;查询文件"></a>&gt;查询文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find [path_root] -name &apos;*.doc*&apos;</span><br><span class="line">find / -name [xxx] -d</span><br><span class="line">locate</span><br></pre></td></tr></table></figure><h1 id="gt-查看某个端口是否被占用"><a href="#gt-查看某个端口是否被占用" class="headerlink" title="&gt;查看某个端口是否被占用"></a>&gt;查看某个端口是否被占用</h1><p>习惯用lsof  不想用netstat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装 </span><br><span class="line">yum install lsof -y</span><br><span class="line">lsof -i tcp:8080     (PS 必须用root权限)</span><br><span class="line"></span><br><span class="line">netstat -tunlp|grep [端口号]</span><br><span class="line">ps -axu|grep [java]  启动位置输出</span><br></pre></td></tr></table></figure></p><h1 id="gt-文件下载"><a href="#gt-文件下载" class="headerlink" title="&gt;文件下载"></a>&gt;文件下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.shu.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.zip --no-check-certificate</span><br></pre></td></tr></table></figure><h1 id="gt-scp下载"><a href="#gt-scp下载" class="headerlink" title="&gt;scp下载"></a>&gt;scp下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp -P 2204 isinonet@106.37.74.50:/home/gzzx/excel/ProfessionReport18584791024.xlsx /Users/apple/Documents</span><br><span class="line">scp -P 2204 isinonet@106.37.74.50:/logs/test.log /Users/apple/Documents</span><br><span class="line">-r 文件夹   -p端口</span><br></pre></td></tr></table></figure><h1 id="gt-上传"><a href="#gt-上传" class="headerlink" title="&gt;上传"></a>&gt;上传</h1><p>服务器文件移动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /Users/apple/Documents/zwsj-category-0.0.1-SNAPSHOT.jar root@192.168.0.118:/home/zwsjObj</span><br><span class="line">Scp -r</span><br></pre></td></tr></table></figure></p><h1 id="gt-其他"><a href="#gt-其他" class="headerlink" title="&gt;其他"></a>&gt;其他</h1><p>查看磁盘容量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df -hl /xxx</span><br></pre></td></tr></table></figure></p><p>查看位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">which java</span><br></pre></td></tr></table></figure></p><p>rpm包安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rpm -ivh **.rpm</span><br></pre></td></tr></table></figure></p><p>后台运行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Nohup 详细指南</span><br></pre></td></tr></table></figure></p><p>该命令用来列出目前与过去登录系统的用户相关信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Last</span><br></pre></td></tr></table></figure></p><p>Linux查看文件夹大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">du -sh</span><br></pre></td></tr></table></figure></p><p>查看当前文件夹大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">du -sh * | sort -n</span><br></pre></td></tr></table></figure></p><p>统计当前文件夹(目录)大小，并按文件大小排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">du -sk filename 查看指定文件大小</span><br></pre></td></tr></table></figure></p><p>遇到其他不会的命令实例可以按照这个命令来查看基础语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tldr  mkdir</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gt-File&quot;&gt;&lt;a href=&quot;#gt-File&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt;File&quot;&gt;&lt;/a&gt;&amp;gt;File&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>vimrc配置文件</title>
    <link href="http://yoursite.com/2019/12/18/vimrc/"/>
    <id>http://yoursite.com/2019/12/18/vimrc/</id>
    <published>2019-12-17T16:00:00.000Z</published>
    <updated>2019-12-19T09:19:22.865Z</updated>
    
    <content type="html"><![CDATA[<p>替换了本地的自带的vi </p><p>采用了 macvim</p><p>安装方法通过 brew </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install macvim</span><br></pre></td></tr></table></figure><p>安装过程需要xcode的支持 </p><p>下载时间比较长耐心等待下 可能会报错 具体解决原有看报错后的日志</p><p>之后需要修改.bash_profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias vi=vim</span><br><span class="line">alias vim=mvim</span><br><span class="line">alias mvim=&apos;/usr/local/bin/mvim -v&apos;</span><br></pre></td></tr></table></figure><p>安装完成后 去配置vim的 .vimrc文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line">&quot;=========================================================================</span><br><span class="line">&quot; DesCRiption: 适合自己使用的vimrc文件，for Linux/Windows, GUI/Console</span><br><span class="line">&quot;</span><br><span class="line">&quot; Last Change: 2019年08月02日 15时13分 </span><br><span class="line">&quot;</span><br><span class="line">&quot; Version: 1.80</span><br><span class="line">&quot;</span><br><span class="line">&quot;=========================================================================</span><br><span class="line"></span><br><span class="line">set nocompatible &quot; 关闭 vi 兼容模式</span><br><span class="line">syntax on &quot; 自动语法高亮</span><br><span class="line">set number &quot; 显示行号</span><br><span class="line">set cursorline &quot; 突出显示当前行</span><br><span class="line">set ruler &quot; 打开状态栏标尺</span><br><span class="line">set shiftwidth=4 &quot; 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span><br><span class="line">set softtabstop=4 &quot; 使得按退格键时可以一次删掉 4 个空格</span><br><span class="line">set tabstop=4 &quot; 设定 tab 长度为 4</span><br><span class="line">set nobackup &quot; 覆盖文件时不备份</span><br><span class="line">set autochdir &quot; 自动切换当前目录为当前文件所在的目录</span><br><span class="line">filetype plugin indent on &quot; 开启插件</span><br><span class="line">set backupcopy=yes &quot; 设置备份时的行为为覆盖</span><br><span class="line">set ignorecase smartcase &quot; 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感</span><br><span class="line">set nowrapscan &quot; 禁止在搜索到文件两端时重新搜索</span><br><span class="line">set incsearch &quot; 输入搜索内容时就显示搜索结果</span><br><span class="line">set hlsearch &quot; 搜索时高亮显示被找到的文本</span><br><span class="line">set noerrorbells &quot; 关闭错误信息响铃</span><br><span class="line">set novisualbell &quot; 关闭使用可视响铃代替呼叫</span><br><span class="line">set t_vb= &quot; 置空错误铃声的终端代码</span><br><span class="line">&quot; set showmatch &quot; 插入括号时，短暂地跳转到匹配的对应括号</span><br><span class="line">&quot; set matchtime=2 &quot; 短暂跳转到匹配括号的时间</span><br><span class="line">set magic &quot; 设置魔术</span><br><span class="line">set hidden &quot; 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存</span><br><span class="line">set guioptions-=T &quot; 隐藏工具栏</span><br><span class="line">set guioptions-=m &quot; 隐藏菜单栏</span><br><span class="line">set smartindent &quot; 开启新行时使用智能自动缩进</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">&quot; 不设定在插入状态无法用退格键和 Delete 键删除回车符</span><br><span class="line">set cmdheight=1 &quot; 设定命令行的行数为 1</span><br><span class="line">set laststatus=2 &quot; 显示状态栏 (默认值为 1, 无法显示状态栏)</span><br><span class="line">set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\ </span><br><span class="line">&quot; 设置在状态行显示的信息</span><br><span class="line">set foldenable &quot; 开始折叠</span><br><span class="line">set foldmethod=syntax &quot; 设置语法折叠</span><br><span class="line">set foldcolumn=0 &quot; 设置折叠区域的宽度</span><br><span class="line">setlocal foldlevel=1 &quot; 设置折叠层数为</span><br><span class="line">&quot; set foldclose=all &quot; 设置为自动关闭折叠 </span><br><span class="line">&quot; nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</span><br><span class="line">&quot; 用空格键来开关折叠</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; return OS type, eg: windows, or linux, mac, et.st..</span><br><span class="line">function! MySys()</span><br><span class="line">if has(&quot;win16&quot;) || has(&quot;win32&quot;) || has(&quot;win64&quot;) || has(&quot;win95&quot;)</span><br><span class="line">return &quot;windows&quot;</span><br><span class="line">elseif has(&quot;unix&quot;)</span><br><span class="line">return &quot;linux&quot;</span><br><span class="line">endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">&quot; 用户目录变量$VIMFILES</span><br><span class="line">if MySys() == &quot;windows&quot;</span><br><span class="line">let $VIMFILES = $VIM.&apos;/vimfiles&apos;</span><br><span class="line">elseif MySys() == &quot;linux&quot;</span><br><span class="line">let $VIMFILES = $HOME.&apos;/.vim&apos;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; 设定doc文档目录</span><br><span class="line">let helptags=$VIMFILES.&apos;/doc&apos;</span><br><span class="line"></span><br><span class="line">&quot; 设置字体 以及中文支持</span><br><span class="line">if has(&quot;win32&quot;)</span><br><span class="line">set guifont=Inconsolata:h12:cANSI</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; 配置多语言环境</span><br><span class="line">if has(&quot;multi_byte&quot;)</span><br><span class="line">&quot; UTF-8 编码</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set formatoptions+=mM</span><br><span class="line">set fencs=utf-8,gbk</span><br><span class="line"></span><br><span class="line">if v:lang =~? &apos;^\(zh\)\|\(ja\)\|\(ko\)&apos;</span><br><span class="line">set ambiwidth=double</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if has(&quot;win32&quot;)</span><br><span class="line">source $VIMRUNTIME/delmenu.vim</span><br><span class="line">source $VIMRUNTIME/menu.vim</span><br><span class="line">language messages zh_CN.utf-8</span><br><span class="line">endif</span><br><span class="line">else</span><br><span class="line">echoerr &quot;Sorry, this version of (g)vim was not compiled with +multi_byte&quot;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Buffers操作快捷方式!</span><br><span class="line">nnoremap &lt;C-RETURN&gt; :bnext&lt;CR&gt;</span><br><span class="line">nnoremap &lt;C-S-RETURN&gt; :bprevious&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; Tab操作快捷方式!</span><br><span class="line">nnoremap &lt;C-TAB&gt; :tabnext&lt;CR&gt;</span><br><span class="line">nnoremap &lt;C-S-TAB&gt; :tabprev&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;关于tab的快捷键</span><br><span class="line">&quot; map tn :tabnext&lt;cr&gt;</span><br><span class="line">&quot; map tp :tabprevious&lt;cr&gt;</span><br><span class="line">&quot; map td :tabnew .&lt;cr&gt;</span><br><span class="line">&quot; map te :tabedit</span><br><span class="line">&quot; map tc :tabclose&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot;窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动</span><br><span class="line">&quot;光标到上方窗口,需要&lt;c-w&gt;&lt;c-w&gt;k,非常麻烦,现在重映射为&lt;c-k&gt;,切换的</span><br><span class="line">&quot;时候会变得非常方便.</span><br><span class="line">nnoremap &lt;C-h&gt; &lt;C-w&gt;h</span><br><span class="line">nnoremap &lt;C-j&gt; &lt;C-w&gt;j</span><br><span class="line">nnoremap &lt;C-k&gt; &lt;C-w&gt;k</span><br><span class="line">nnoremap &lt;C-l&gt; &lt;C-w&gt;l</span><br><span class="line"></span><br><span class="line">&quot;一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）</span><br><span class="line">nnoremap &lt;leader&gt;1 :set filetype=xhtml&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;2 :set filetype=css&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;3 :set filetype=javascript&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;4 :set filetype=php&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; set fileformats=unix,dos,mac</span><br><span class="line">&quot; nmap &lt;leader&gt;fd :se fileformat=dos&lt;CR&gt;</span><br><span class="line">&quot; nmap &lt;leader&gt;fu :se fileformat=unix&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result</span><br><span class="line">&quot; map &lt;C-x&gt;l &lt;ESC&gt;:cl&lt;CR&gt;</span><br><span class="line">&quot; map &lt;C-x&gt;n &lt;ESC&gt;:cn&lt;CR&gt;</span><br><span class="line">&quot; map &lt;C-x&gt;p &lt;ESC&gt;:cp&lt;CR&gt;</span><br><span class="line">&quot; map &lt;C-x&gt;c &lt;ESC&gt;:cc&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; 让 Tohtml 产生有 CSS 语法的 html</span><br><span class="line">&quot; syntax/2html.vim，可以用:runtime! syntax/2html.vim</span><br><span class="line">let html_use_css=1</span><br><span class="line"></span><br><span class="line">&quot; Python 文件的一般设置，比如不要 tab 等</span><br><span class="line">autocmd FileType python set tabstop=4 shiftwidth=4 expandtab</span><br><span class="line">autocmd FileType python map &lt;F12&gt; :!python %&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; 选中状态下 Ctrl+c 复制</span><br><span class="line">vmap &lt;C-c&gt; &quot;+y</span><br><span class="line"></span><br><span class="line">&quot; 打开javascript折叠</span><br><span class="line">let b:javascript_fold=1</span><br><span class="line">&quot; 打开javascript对dom、html和css的支持</span><br><span class="line">let javascript_enable_domhtmlcss=1</span><br><span class="line">&quot; 设置字典 ~/.vim/dict/文件的路径</span><br><span class="line">autocmd filetype javascript set dictionary=$VIMFILES/dict/javascript.dict</span><br><span class="line">autocmd filetype css set dictionary=$VIMFILES/dict/css.dict</span><br><span class="line">autocmd filetype php set dictionary=$VIMFILES/dict/php.dict</span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - bufexplorer.vim Buffers切换</span><br><span class="line">&quot; \be 全屏方式查看全部打开的文件列表</span><br><span class="line">&quot; \bv 左右方式查看 \bs 上下方式查看</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - taglist.vim 查看函数列表，需要ctags程序</span><br><span class="line">&quot; F4 打开隐藏taglist窗口</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">if MySys() == &quot;windows&quot; &quot; 设定windows系统中ctags程序的位置</span><br><span class="line">let Tlist_Ctags_Cmd = &apos;&quot;&apos;.$VIMRUNTIME.&apos;/ctags.exe&quot;&apos;</span><br><span class="line">elseif MySys() == &quot;linux&quot; &quot; 设定windows系统中ctags程序的位置</span><br><span class="line">let Tlist_Ctags_Cmd = &apos;/usr/bin/ctags&apos;</span><br><span class="line">endif</span><br><span class="line">nnoremap &lt;silent&gt;&lt;F4&gt; :TlistToggle&lt;CR&gt;</span><br><span class="line">let Tlist_Show_One_File = 1 &quot; 不同时显示多个文件的tag，只显示当前文件的</span><br><span class="line">let Tlist_Exit_OnlyWindow = 1 &quot; 如果taglist窗口是最后一个窗口，则退出vim</span><br><span class="line">let Tlist_Use_Right_Window = 1 &quot; 在右侧窗口中显示taglist窗口</span><br><span class="line">let Tlist_File_Fold_Auto_Close=1 &quot; 自动折叠当前非编辑文件的方法列表</span><br><span class="line">let Tlist_Auto_Open = 0</span><br><span class="line">let Tlist_Auto_Update = 1</span><br><span class="line">let Tlist_Hightlight_Tag_On_BufEnter = 1</span><br><span class="line">let Tlist_Enable_Fold_Column = 0</span><br><span class="line">let Tlist_Process_File_Always = 1</span><br><span class="line">let Tlist_Display_Prototype = 0</span><br><span class="line">let Tlist_Compact_Format = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。</span><br><span class="line">&quot; \m mark or unmark the word under (or before) the cursor</span><br><span class="line">&quot; \r manually input a regular expression. 用于搜索.</span><br><span class="line">&quot; \n clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .</span><br><span class="line">&quot; \* 当前MarkWord的下一个 \# 当前MarkWord的上一个</span><br><span class="line">&quot; \/ 所有MarkWords的下一个 \? 所有MarkWords的上一个</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录</span><br><span class="line">&quot; :ERDtree 打开NERD_tree :NERDtreeClose 关闭NERD_tree</span><br><span class="line">&quot; o 打开关闭文件或者目录 t 在标签页中打开</span><br><span class="line">&quot; T 在后台标签页中打开 ! 执行此文件</span><br><span class="line">&quot; p 到上层目录 P 到根目录</span><br><span class="line">&quot; K 到第一个节点 J 到最后一个节点</span><br><span class="line">&quot; u 打开上层目录 m 显示文件系统菜单（添加、删除、移动操作）</span><br><span class="line">&quot; r 递归刷新当前目录 R 递归刷新当前根目录</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; F3 NERDTree 切换</span><br><span class="line">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">imap &lt;F3&gt; &lt;ESC&gt;:NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - NERD_commenter.vim 注释代码用的，</span><br><span class="line">&quot; [count],cc 光标以下count行逐行添加注释(7,cc)</span><br><span class="line">&quot; [count],cu 光标以下count行逐行取消注释(7,cu)</span><br><span class="line">&quot; [count],cm 光标以下count行尝试添加块注释(7,cm)</span><br><span class="line">&quot; ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。</span><br><span class="line">&quot; 注：count参数可选，无则默认为选中行或当前行</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">let NERDSpaceDelims=1 &quot; 让注释符与语句之间留一个空格</span><br><span class="line">let NERDCompactSexyComs=1 &quot; 多行注释时样子更好看</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - DoxygenToolkit.vim 由注释生成文档，并且能够快速生成函数标准注释</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">let g:DoxygenToolkit_authorName=&quot;Asins - asinsimple AT gmail DOT com&quot;</span><br><span class="line">let g:DoxygenToolkit_briefTag_funcName=&quot;yes&quot;</span><br><span class="line">map &lt;leader&gt;da :DoxAuthor&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;df :Dox&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;db :DoxBlock&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;dc a /* */&lt;LEFT&gt;&lt;LEFT&gt;&lt;LEFT&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin – ZenCoding.vim 很酷的插件，HTML代码生成</span><br><span class="line">&quot; 插件最新版：http://github.com/mattn/zencoding-vim</span><br><span class="line">&quot; 常用命令可看：http://nootn.com/blog/Tool/23/</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin – checksyntax.vim JavaScript常见语法错误检查</span><br><span class="line">&quot; 默认快捷方式为 F5</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">let g:checksyntax_auto = 0 &quot; 不自动检查</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - NeoComplCache.vim 自动补全插件</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">let g:AutoComplPop_NotEnableAtStartup = 1</span><br><span class="line">let g:NeoComplCache_EnableAtStartup = 1</span><br><span class="line">let g:NeoComplCache_SmartCase = 1</span><br><span class="line">let g:NeoComplCache_TagsAutoUpdate = 1</span><br><span class="line">let g:NeoComplCache_EnableInfo = 1</span><br><span class="line">let g:NeoComplCache_EnableCamelCaseCompletion = 1</span><br><span class="line">let g:NeoComplCache_MinSyntaxLength = 3</span><br><span class="line">let g:NeoComplCache_EnableSkipCompletion = 1</span><br><span class="line">let g:NeoComplCache_SkipInputTime = &apos;0.5&apos;</span><br><span class="line">let g:NeoComplCache_SnippetsDir = $VIMFILES.&apos;/snippets&apos;</span><br><span class="line">&quot; &lt;TAB&gt; completion.</span><br><span class="line">inoremap &lt;expr&gt;&lt;TAB&gt; pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;TAB&gt;&quot;</span><br><span class="line">&quot; snippets expand key</span><br><span class="line">imap &lt;silent&gt; &lt;C-e&gt; &lt;Plug&gt;(neocomplcache_snippets_expand)</span><br><span class="line">smap &lt;silent&gt; &lt;C-e&gt; &lt;Plug&gt;(neocomplcache_snippets_expand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - matchit.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转</span><br><span class="line">&quot; % 正向匹配 g% 反向匹配</span><br><span class="line">&quot; [% 定位块首 ]% 定位块尾</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin - vcscommand.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转</span><br><span class="line">&quot; SVN/git管理工具</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot;-----------------------------------------------------------------</span><br><span class="line">&quot; plugin – a.vim</span><br><span class="line">&quot;----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">&quot;让vimrc配置变更立即生效</span><br><span class="line">autocmd BufWritePost $MYVIMRC source $MYVIMRC-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;替换了本地的自带的vi &lt;/p&gt;
&lt;p&gt;采用了 macvim&lt;/p&gt;
&lt;p&gt;安装方法通过 brew &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="vim" scheme="http://yoursite.com/categories/vim/"/>
    
    
  </entry>
  
  <entry>
    <title>spring cloud alibaba</title>
    <link href="http://yoursite.com/2019/12/16/alibaba/"/>
    <id>http://yoursite.com/2019/12/16/alibaba/</id>
    <published>2019-12-15T16:00:00.000Z</published>
    <updated>2019-12-16T06:09:32.591Z</updated>
    
    <content type="html"><![CDATA[<p>spring cloud alibaba </p><p>nacos  远程配置 | 服务发现和注册<br>ribbon 负载均衡<br>sentinel 熔断监控<br>gateway  网关<br>skywalking 链路追踪<br>rockertMQ 异步通讯<br>seata  分布式事务管理<br>dubbo RPC框架 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring cloud alibaba &lt;/p&gt;
&lt;p&gt;nacos  远程配置 | 服务发现和注册&lt;br&gt;ribbon 负载均衡&lt;br&gt;sentinel 熔断监控&lt;br&gt;gateway  网关&lt;br&gt;skywalking 链路追踪&lt;br&gt;rockertMQ 异步通讯&lt;br
      
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>idea 显示run dashboard</title>
    <link href="http://yoursite.com/2019/11/20/ideaRun/"/>
    <id>http://yoursite.com/2019/11/20/ideaRun/</id>
    <published>2019-11-19T16:00:00.000Z</published>
    <updated>2020-04-08T06:41:57.428Z</updated>
    
    <content type="html"><![CDATA[<p>在最上面的 help -&gt; edit custom VM  options </p><p>在打开的xml里面添加</p><p>-Dide.run.dashboard=true</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在最上面的 help -&amp;gt; edit custom VM  options &lt;/p&gt;
&lt;p&gt;在打开的xml里面添加&lt;/p&gt;
&lt;p&gt;-Dide.run.dashboard=true&lt;/p&gt;

      
    
    </summary>
    
      <category term="idea" scheme="http://yoursite.com/categories/idea/"/>
    
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>博客MD模板应用</title>
    <link href="http://yoursite.com/2019/10/08/tamplate/"/>
    <id>http://yoursite.com/2019/10/08/tamplate/</id>
    <published>2019-10-07T16:00:00.000Z</published>
    <updated>2020-04-22T10:03:40.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="literal-asterisks-转义"><a href="#literal-asterisks-转义" class="headerlink" title="\*literal asterisks\* 转义"></a>\*literal asterisks\* 转义</h1></blockquote><p>*literal asterisks*</p><blockquote><h1 id="MD-语法-加粗-加粗"><a href="#MD-语法-加粗-加粗" class="headerlink" title="MD 语法 加粗 **加粗**"></a>MD 语法 加粗 **加粗**</h1></blockquote><p><strong>比较粗</strong></p><blockquote><h1 id="MD-语法-斜体-斜体"><a href="#MD-语法-斜体-斜体" class="headerlink" title="MD 语法 斜体 *斜体*"></a>MD 语法 斜体 *斜体*</h1></blockquote><p><em>本来就是斜的</em></p><blockquote><h1 id="MD-语法-列表-1-2-3"><a href="#MD-语法-列表-1-2-3" class="headerlink" title="MD 语法 列表 1. 2. 3."></a>MD 语法 列表 1. 2. 3.</h1></blockquote><ol><li>ni shuo ni shi shui ?</li><li>ni bushi shuo ni me ?</li><li>wo xi huan de shi ni !</li></ol><blockquote><h1 id="MD-语法-列表-XXX-XXX-XXX"><a href="#MD-语法-列表-XXX-XXX-XXX" class="headerlink" title="MD 语法 列表 -XXX -XXX -XXX"></a>MD 语法 列表 -XXX -XXX -XXX</h1></blockquote><ul><li>wo bu shi yi ge haoren</li><li>na ni shi shen me ?</li><li>wo shi dog</li></ul><blockquote><h1 id="MD-语法-分割线-代表一条分割线"><a href="#MD-语法-分割线-代表一条分割线" class="headerlink" title="MD 语法 分割线 *** 代表一条分割线"></a>MD 语法 分割线 *** 代表一条分割线</h1></blockquote><hr><hr><blockquote><h1 id="MD-语法-A-标签-A-标签显示的名称-链接地址"><a href="#MD-语法-A-标签-A-标签显示的名称-链接地址" class="headerlink" title="MD 语法 A 标签 [A 标签显示的名称](链接地址)"></a>MD 语法 A 标签 [A 标签显示的名称](链接地址)</h1></blockquote><p><a href="http://www.baidu.com" target="_blank" rel="noopener">baidu</a></p><blockquote><h1 id="MD-语法-图片-图片说明-图片地址"><a href="#MD-语法-图片-图片说明-图片地址" class="headerlink" title="MD 语法 图片 ![ 图片说明 ](图片地址)"></a>MD 语法 图片 ![ 图片说明 ](图片地址)</h1></blockquote><p><img src="/static/jvm.jpeg" alt="img"></p><blockquote><h1 id="MD-语法-编写代码-三个"><a href="#MD-语法-编写代码-三个" class="headerlink" title="MD 语法 编写代码 三个 `"></a>MD 语法 编写代码 三个 `</h1></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  <span class="title">print</span><span class="params">(<span class="string">'asd'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><h1 id="MD-语法-表格"><a href="#MD-语法-表格" class="headerlink" title="MD 语法 表格"></a>MD 语法 表格</h1></blockquote><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">select_type</th><th style="text-align:center">table</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">“SIMPLE”</td><td style="text-align:center">“professor”</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">“SIMPLE”</td><td style="text-align:center">“professor”</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">“SIMPLE”</td><td style="text-align:center">“professor”</td></tr></tbody></table><blockquote><h1 id="MD-语法-标题-一个-号是一级标题-依此类推"><a href="#MD-语法-标题-一个-号是一级标题-依此类推" class="headerlink" title="MD 语法 标题 一个#号是一级标题 依此类推"></a>MD 语法 标题 一个#号是一级标题 依此类推</h1></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;literal-asterisks-转义&quot;&gt;&lt;a href=&quot;#literal-asterisks-转义&quot; class=&quot;headerlink&quot; title=&quot;\*literal asterisks\* 转义&quot;&gt;&lt;/a&gt;\*literal
      
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/other/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/other/java/linux/"/>
    
      <category term="db" scheme="http://yoursite.com/categories/other/java/linux/db/"/>
    
      <category term="工具" scheme="http://yoursite.com/categories/other/java/linux/db/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>docker基本语法</title>
    <link href="http://yoursite.com/2019/10/08/dockerShell/"/>
    <id>http://yoursite.com/2019/10/08/dockerShell/</id>
    <published>2019-10-07T16:00:00.000Z</published>
    <updated>2019-12-13T10:12:52.281Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>查看所有正在运行容器 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></table></figure></li><li><p>查看所有容器 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a</span></span><br></pre></td></tr></table></figure></li><li><p>查看所有容器ID </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a -q</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start [NAME]</span><br></pre></td></tr></table></figure></li><li><p>stop停止所有容器 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop </span><br><span class="line">$(docker ps -a -q)</span><br></pre></td></tr></table></figure></li><li><p>remove删除所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure></li><li><p>run创建一个新的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it [NAME] /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>Exec 进入一个已经存在的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 217a29f3495a /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>查看容器启动日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [容器ID]</span><br></pre></td></tr></table></figure></li></ul><p>-删除容器镜像  image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rmi IMAGE [IMAGE...]</span><br><span class="line">sudo docker rmi centos:latest</span><br></pre></td></tr></table></figure></p><ul><li><p>强制删除 实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f</span><br></pre></td></tr></table></figure></li><li><p>启动一个实例Container </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">sudo docker run -t -i contos /bin/bash</span><br><span class="line">sudo docker run  -p 8080:8080 -d [name]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看所有正在运行容器 &lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
      
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>git 忽略已经提交和没提交的文件</title>
    <link href="http://yoursite.com/2019/10/08/gitignore/"/>
    <id>http://yoursite.com/2019/10/08/gitignore/</id>
    <published>2019-10-07T16:00:00.000Z</published>
    <updated>2019-12-27T09:23:18.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="没有提交的"><a href="#没有提交的" class="headerlink" title="没有提交的"></a>没有提交的</h1><p>其实一直都知道有这么个功能 但是一直都是手写没有记录 </p><p>可以先去看下github官方提供的gitignore  里面有各种语言的 gitignore</p><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p><p>自己个性化的话 可以在上面的文件基础上修改</p><p>在Git工作区的根目录下创建一个特殊的 .gitignore</p><p>下面是我自己使用的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/target/**</span><br><span class="line">/target</span><br><span class="line">target</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line">###STS###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line">###IntelliJIDEA###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">###NetBeans###</span><br><span class="line">/nbproject/private/</span><br><span class="line">/build/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br><span class="line"></span><br><span class="line">#Compiledclassfile</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line">#Logfile</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line">#BlueJfiles</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line">#MobileToolsforJava(J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line">#PackageFiles#</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.pdf</span><br><span class="line">.zip</span><br><span class="line">.doc</span><br></pre></td></tr></table></figure></p><p>下面是一些语法使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">• bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class="line"></span><br><span class="line">• /bin: 忽略根目录下的bin文件</span><br><span class="line"></span><br><span class="line">• /*.c: 忽略 cat.c，不忽略 build/cat.c</span><br><span class="line"></span><br><span class="line">• debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj</span><br><span class="line"></span><br><span class="line">• **/foo: 忽略/foo, a/foo, a/b/foo等</span><br><span class="line"></span><br><span class="line">• a/**/b: 忽略a/b, a/x/b, a/x/y/b等</span><br><span class="line"></span><br><span class="line">• !/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件</span><br><span class="line"></span><br><span class="line">• *.log: 忽略所有 .log 文件</span><br><span class="line"></span><br><span class="line">• config.php: 忽略当前路径的 config.php 文件</span><br></pre></td></tr></table></figure></p><h1 id="已经提交但是本地在修改需要忽略的"><a href="#已经提交但是本地在修改需要忽略的" class="headerlink" title="已经提交但是本地在修改需要忽略的"></a>已经提交但是本地在修改需要忽略的</h1><p>值得注意的是中央仓库已经存在该文件后 需要取消追踪<br>对某个文件取消跟踪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached  readme1.txt # 删除readme1.txt的跟踪，并保留在本地。</span><br><span class="line"></span><br><span class="line">git add -A # 这里是将所有的改动提交到git</span><br><span class="line"></span><br><span class="line">git commit -m &apos;update local file&apos;</span><br></pre></td></tr></table></figure><p>然后git commit 即可。但是git status查看状态时还是会列出来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;没有提交的&quot;&gt;&lt;a href=&quot;#没有提交的&quot; class=&quot;headerlink&quot; title=&quot;没有提交的&quot;&gt;&lt;/a&gt;没有提交的&lt;/h1&gt;&lt;p&gt;其实一直都知道有这么个功能 但是一直都是手写没有记录 &lt;/p&gt;
&lt;p&gt;可以先去看下github官方提供的gitign
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>基于SLF4J MDC机制配合AOP实现日志的链路追踪</title>
    <link href="http://yoursite.com/2019/05/31/slf4jMDC/"/>
    <id>http://yoursite.com/2019/05/31/slf4jMDC/</id>
    <published>2019-05-30T16:00:00.000Z</published>
    <updated>2020-04-08T06:44:37.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一个合格的项目必须要有日志来支撑,日志不但能记录输入输出,当系统有问题的时候我们还需要做线上问题的排查.</p><p>在一个正常的项目中日志里包含了各种各样的接口及其他无关的数据日志,那么我们如何快速定位单次请求中所有的日志呢 ?</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>当我们设计一个系统日志的时候</p><p>首先我们需要解决以下几个问题</p><ol><li><p>哪些数据需要写进日志中</p></li><li><p>日志如何分类 按天还是按周</p></li><li><p>如何区分每次请求</p></li><li><p>请求参数及返回值需不需要打印</p></li><li><p>如何进行多环节配置</p></li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>按照上面的问题我们来一个一个解决</p><p>主要思路是</p><ol><li><p>AOP 负责切入每个请求及参数打印</p></li><li><p>在进入 controller 之前打印本次请求的各种参数</p></li><li><p>MDC 添加 hashCode 来做参数校验</p></li><li><p>日志使用 logback 配置</p></li><li><p>日志按天分类,每天生成一个日志</p></li><li><p>利用 thread 来区分每次请求</p></li><li><p>springProfile 来做多环境配置</p></li></ol><p>aop 有两种<br>CGLIB,JDK 都是动态代理 今天不讨论这两者的区别 我使用的是 CGLIB</p><p>pom 中引入 SpringBoot 的 web 模块和使用 AOP 相关的依赖：</p><p>定义切面类，实现 web 层的日志切面</p><p>对所有的 web 请求做切面来记录日志</p><h1 id="第一种-AOP-上-logback-的输出"><a href="#第一种-AOP-上-logback-的输出" class="headerlink" title="第一种 AOP 上 logback 的输出"></a>第一种 AOP 上 logback 的输出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">     ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">     <span class="keyword">if</span> (attributes != <span class="keyword">null</span> &amp;&amp; joinPoint != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">         HttpServletRequest request = attributes.getRequest();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 记录请求内容</span></span><br><span class="line">         log.info( <span class="string">"1. 对象请求的URL : "</span> + request.getRequestURL().toString());</span><br><span class="line">         log.info( <span class="string">"2. 请求方法名称 : "</span> + request.getMethod());</span><br><span class="line">         log.info( <span class="string">"3. 对方IP地址 : "</span> + request.getRemoteAddr());</span><br><span class="line">         log.info( <span class="string">"4. 运行的java类 : "</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName());</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">             log.info(<span class="string">"5. 请求参数 : "</span> + JSONObject.toJSONString(joinPoint.getArgs() ));</span><br><span class="line">         &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">             log.info(<span class="string">"请求参数切点无法切入"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> CheckException(<span class="string">"网络请求出错, 请清空缓存重新尝试. "</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h1 id="第二种-request-HashCode-唯一标示"><a href="#第二种-request-HashCode-唯一标示" class="headerlink" title="第二种 request.HashCode 唯一标示"></a>第二种 request.HashCode 唯一标示</h1><p>在获得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">log.info(request.hashCode()+ <span class="string">"5. 请求参数 : "</span> + JSONObject.toJSONString(joinPoint.getArgs() ));</span><br></pre></td></tr></table></figure><h1 id="第三种-基于-SLF4J-的-MDC-机制"><a href="#第三种-基于-SLF4J-的-MDC-机制" class="headerlink" title="第三种 基于 SLF4J 的 MDC 机制"></a>第三种 基于 SLF4J 的 MDC 机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MDC.put(<span class="string">"THREAD_ID"</span>, <span class="string">"userId"</span>+ userService.getId() );</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date [%thread] %-5level %logger&#123;80&#125;  %X&#123;THREAD_ID&#125; || %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第四种-结合-HashCode-和-MDC"><a href="#第四种-结合-HashCode-和-MDC" class="headerlink" title="第四种 结合 HashCode 和 MDC"></a>第四种 结合 HashCode 和 MDC</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MDC.put(<span class="string">"THREAD_ID"</span>, <span class="string">""</span>+request.hashCode());</span><br></pre></td></tr></table></figure><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">14</span>:<span class="number">27</span>,<span class="number">743</span> [main] INFO  com.zwkj.zhxt.ZhxtApplication || Started ZhxtApplication in <span class="number">48.489</span> seconds (JVM running <span class="keyword">for</span> <span class="number">56.375</span>)</span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">28</span>,<span class="number">310</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">1</span>. 对象请求的URL : http:<span class="comment">//localhost:8088/zhxtotc/sys-user/login</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">28</span>,<span class="number">313</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">2</span>. 请求方法名称 : POST</span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">28</span>,<span class="number">314</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">3</span>. 对方IP地址 : <span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">28</span>,<span class="number">323</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">4</span>. 运行的java类 : com.zwkj.zhxt.controller.SysUserController.findSysUser</span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">28</span>,<span class="number">585</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">2825564545</span>. 请求参数 : [&#123;<span class="string">"code"</span>:<span class="string">"string"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>,<span class="string">"phone"</span>:<span class="string">"string"</span>,<span class="string">"username"</span>:<span class="string">"admin12"</span>&#125;]</span><br><span class="line"> Time：<span class="number">168</span> ms - ID：com.zwkj.zhxt.mvc.sysuser.mapper.SysUserMapper.selectOne</span><br><span class="line">Execute SQL：SELECT id,username,password,nickname,role_id,create_time,update_time,delete_status,user_id FROM sys_user WHERE username = <span class="string">'admin12'</span> AND password = <span class="string">'4QrcOUm6Wau+VuBX8g+IPg=='</span></span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">30</span>,<span class="number">860</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="meta">@Around</span>:结果是 :ResultBean com.zwkj.zhxt.controller.SysUserController.findSysUser(UserModel) use time: <span class="number">2551</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">30</span>,<span class="number">861</span> [qtp1387878879-<span class="number">21</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">282556454</span>: 方法的返回值 : ResultBean(msg=success, code=<span class="number">0</span>, data=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJub3ciOiIxNTU5NjE0NTMwMjE2emh4dCIsImtleSI6InVzZXIxMiJ9.ae7ra7hvDSp5N6YfuGYzr8ULeq7Zr5OuC_4PbybqceY)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">41</span>,<span class="number">401</span> [qtp1387878879-<span class="number">19</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">1</span>. 对象请求的URL : http:<span class="comment">//localhost:8088/zhxtotc/sys-user/login</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">41</span>,<span class="number">401</span> [qtp1387878879-<span class="number">19</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">2</span>. 请求方法名称 : POST</span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">41</span>,<span class="number">402</span> [qtp1387878879-<span class="number">19</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">3</span>. 对方IP地址 : <span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">41</span>,<span class="number">402</span> [qtp1387878879-<span class="number">19</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">4</span>. 运行的java类 : com.zwkj.zhxt.controller.SysUserController.findSysUser</span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">15</span>:<span class="number">41</span>,<span class="number">402</span> [qtp1387878879-<span class="number">19</span>] INFO  com.zwkj.zhxt.common.ControllerAOP || <span class="number">2825564545</span>. 请求参数 : [&#123;<span class="string">"code"</span>:<span class="string">"string"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>,<span class="string">"phone"</span>:<span class="string">"string"</span>,<span class="string">"username"</span>:<span class="string">"admin12"</span>&#125;]</span><br><span class="line"> Time：<span class="number">151</span> ms - ID：com.zwkj.zhxt.mvc.sysuser.mapper.SysUserMapper.selectOne</span><br><span class="line">Execute SQL：SELECT id,username,password,nickname,role_id,create_time,update_time,delete_status,user_id FROM sys_user WHERE username = <span class="string">'admin12'</span> AND password = <span class="string">'4QrcOUm6Wau+VuBX8g+IPg=='</span></span><br></pre></td></tr></table></figure><blockquote><h1 id="literal-asterisks-转义"><a href="#literal-asterisks-转义" class="headerlink" title="\*literal asterisks\* 转义"></a>\*literal asterisks\* 转义</h1></blockquote><p>*literal asterisks*</p><blockquote><h1 id="MD-语法-加粗-加粗"><a href="#MD-语法-加粗-加粗" class="headerlink" title="MD 语法 加粗 **加粗**"></a>MD 语法 加粗 **加粗**</h1></blockquote><p><strong>比较粗</strong></p><blockquote><h1 id="MD-语法-斜体-斜体"><a href="#MD-语法-斜体-斜体" class="headerlink" title="MD 语法 斜体 *斜体*"></a>MD 语法 斜体 *斜体*</h1></blockquote><p><em>本来就是斜的</em></p><blockquote><h1 id="MD-语法-列表-1-2-3"><a href="#MD-语法-列表-1-2-3" class="headerlink" title="MD 语法 列表 1. 2. 3."></a>MD 语法 列表 1. 2. 3.</h1></blockquote><ol><li>ni shuo ni shi shui ?</li><li>ni bushi shuo ni me ?</li><li>wo xi huan de shi ni !</li></ol><blockquote><h1 id="MD-语法-列表-XXX-XXX-XXX"><a href="#MD-语法-列表-XXX-XXX-XXX" class="headerlink" title="MD 语法 列表 -XXX -XXX -XXX"></a>MD 语法 列表 -XXX -XXX -XXX</h1></blockquote><ul><li>wo bu shi yi ge haoren</li><li>na ni shi shen me ?</li><li>wo shi dog</li></ul><blockquote><h1 id="MD-语法-分割线-代表一条分割线"><a href="#MD-语法-分割线-代表一条分割线" class="headerlink" title="MD 语法 分割线 *** 代表一条分割线"></a>MD 语法 分割线 *** 代表一条分割线</h1></blockquote><hr><hr><hr><blockquote><h1 id="MD-语法-A-标签-A-标签显示的名称-链接地址"><a href="#MD-语法-A-标签-A-标签显示的名称-链接地址" class="headerlink" title="MD 语法 A 标签 [A 标签显示的名称](链接地址)"></a>MD 语法 A 标签 [A 标签显示的名称](链接地址)</h1></blockquote><p><a href="http://www.baidu.com" target="_blank" rel="noopener">baidu</a></p><blockquote><h1 id="MD-语法-图片-图片说明-图片地址"><a href="#MD-语法-图片-图片说明-图片地址" class="headerlink" title="MD 语法 图片 ![ 图片说明 ](图片地址)"></a>MD 语法 图片 ![ 图片说明 ](图片地址)</h1></blockquote><p><img src="/img/banner.jpg" alt="img"></p><blockquote><h1 id="MD-语法-编写代码-三个"><a href="#MD-语法-编写代码-三个" class="headerlink" title="MD 语法 编写代码 三个 `"></a>MD 语法 编写代码 三个 `</h1></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  <span class="title">print</span><span class="params">(<span class="string">'asd'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><h1 id="MD-语法-表格"><a href="#MD-语法-表格" class="headerlink" title="MD 语法 表格"></a>MD 语法 表格</h1></blockquote><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">select_type</th><th style="text-align:center">table</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">“SIMPLE”</td><td style="text-align:center">“professor”</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">“SIMPLE”</td><td style="text-align:center">“professor”</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">“SIMPLE”</td><td style="text-align:center">“professor”</td></tr></tbody></table><blockquote><h1 id="MD-语法-标题-一个-号是一级标题-依此类推"><a href="#MD-语法-标题-一个-号是一级标题-依此类推" class="headerlink" title="MD 语法 标题 一个#号是一级标题 依此类推"></a>MD 语法 标题 一个#号是一级标题 依此类推</h1></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;一个合格的项目必须要有日志来支撑,日志不但能记录输入输出,当系统有问题的时候我们还需要做线上问题的排查.&lt;/p&gt;
&lt;p&gt;在一
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>spring-boot-ioc 解析</title>
    <link href="http://yoursite.com/2019/05/22/springBootIOC/"/>
    <id>http://yoursite.com/2019/05/22/springBootIOC/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2020-04-08T06:44:50.945Z</updated>
    
    <content type="html"><![CDATA[<p>内容过期</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内容过期&lt;/p&gt;

      
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="ioc" scheme="http://yoursite.com/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>记一次慢sql的查询记录</title>
    <link href="http://yoursite.com/2019/05/13/sqlOptimize/"/>
    <id>http://yoursite.com/2019/05/13/sqlOptimize/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2020-04-08T07:04:30.720Z</updated>
    
    <content type="html"><![CDATA[<p>本质上来讲 sql优化和数据库优化是两种优化</p><p>数据库优化包含的种类较多 软件优化,硬件优化</p><p>理论上 单个mysql数据库能够支撑的是每秒2000的并发 极限是5000</p><p>当然本次不说数据库优化 先说sql优化</p><p>sql优化一般是针对单个业务进行优化</p><p>比如秒杀 系统的订单查询 (一般用redis 这里只是举个例子)</p><p>或者说是对excel表格进行分析插入数据库</p><p>等等各种各样的业务</p><p>当然一个简单的sql 可能就是这样的 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> ASSIGNEE_ = <span class="string">'user1'</span></span><br></pre></td></tr></table></figure><p>但在实际业务环境中可能并不是这样</p><p>实际会复杂很多 以及很多条件</p><p>当我们在处理这样的sql的时候 应该怎么去优化以及从哪里入手</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>我们大家都是知道索引可以很好的帮我们来提高效率</p><p>但是具体怎么用 以及针对某个业务或者单条sql怎么优化</p><p>再说这些之前我们先针对SQL进行一些常识性优化  比如</p><h2 id="基本优化"><a href="#基本优化" class="headerlink" title="基本优化"></a>基本优化</h2><p><strong>WHERE 子句里面的列尽量被索引</strong></p><p><strong>尽量避免使用 “SELECT *”</strong></p><p><strong>如果用到分页 尽量使用物理分页 并非逻辑分页</strong></p><p><strong>join列尽量使用索引</strong></p><p><strong>order by 使用索引</strong></p><p>等等  </p><p>总之是<strong>为了避免全表扫描做出的各种操作</strong></p><p>大家应该发现索引的使用还是非常频繁的</p><p>那么具体某个sql使用了哪些索引 以及进行了什么处理操作</p><h1 id="EXPLAIN-优化"><a href="#EXPLAIN-优化" class="headerlink" title="EXPLAIN 优化"></a>EXPLAIN 优化</h1><p>我们可以用  EXPLAIN 关键字去查看执行计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> professor a</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> sys_attend b</span><br><span class="line"><span class="keyword">WHERE</span> a.id = b.professor_id</span><br><span class="line"><span class="keyword">AND</span> b.<span class="string">`type`</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> b.table_id = <span class="number">93353728</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> a.polling_status = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> a.status = <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> (a.Member_category = <span class="number">1</span></span><br><span class="line"><span class="keyword">OR</span> a.Member_category = <span class="number">3</span>)</span><br><span class="line"><span class="keyword">AND</span> (organization_category <span class="keyword">IN</span> (<span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">OR</span> organization_categoryvice <span class="keyword">IN</span> (<span class="number">4</span>, <span class="number">7</span>))</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这张表里大概有这么几个字段</p><ol><li><p>id 执行顺序 可以重复</p><ul><li>id相同则从上往下执行</li><li>id从大到小执行</li></ul></li><li><p>select_type 搜索类型 一共有十一种 具体可以看这篇博客<a href="https://blog.csdn.net/y1193329479/article/details/78821126#27_DEPENDENT_SUBQUERY_134" target="_blank" rel="noopener">SQL_explain操作解释</a> 这里就简单的介绍常见的几种 </p><ul><li><p>第一种也是最常见到的一种 SIMPLE 简单的select查询,查询中不包含子查询或者union;</p></li><li><p>PRIMARY:查询中若包含任何复杂的子查询,最外层查询则被标记; 就是刚刚的优先级最外层则会显示PRIMARY</p></li><li><p>SUBQUERY:在select或者where列表中包含了子查询;</p></li></ul></li></ol><ol start="3"><li><p>type 显示的是访问类型，一般我们优化sql就是着重优化这个 , 是较为重要的一个指标，结果值从好到坏依次是：<br>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL。 一般来说，得保证查询至少达到range级别，最好能达到ref。 那么怎么能达到这个级别呢 </p><ul><li><p>ref:非唯一性索引扫描,返回匹配某个单独值得所有行,本质上也是一种索引访问,它返回所有匹配某个单独值的行,然而,它可能会找到多个符合条件的行,所以它应该属于查找和扫描的混合体;</p></li><li><p>range:只检索给定范围的行,使用一个索引来选择行,key列显示使用哪个索引,一般就是在你的where语句中出现了between,&lt;,&gt;,in等的查询；这种范围索引扫描比全表扫描要好,因为它只需要开始于索引的某一个点,结束于另一个点,不用扫描全部索引; 之前说的避免全表扫描就是为了这样</p></li></ul></li></ol><ol start="4"><li><p>possible_keys:显示可能会被应用到这张表的索引,一个或者多个;查询涉及到的字段上若存在索引,则该索引将被列出,但不一定被查询实际使用到;</p></li><li><p>key:实际使用到的索引.如果为null,则没有使用索引;查询中若使用了覆盖索引,则该索引仅出现在key列表中;</p></li><li><p>key_len:表示索引中使用的字节数,可通过该列计算查询中使用的索引的长度,在不损失精确性的情况下,长度越短越好; key_len显示的值为索引字段的最大可能长度,并非实际使用长度,即key_len是根据表定义计算而得,不是通过表内检索出的;</p></li><li><p>ref:显示索引的哪一列被使用了,如果可能的话,是一个常数,哪些列或常量别用于查找索引列上的值;</p></li><li><p>rows:根据表统计信息及索引选用情况,大致估算出找到所需的记录所需要读取的行数;</p></li><li><p>Extra:包含不适合在其它列中显示但十分重要的额外信息:</p><ul><li>对于这个消息栏里展示的东西有很多 一般是你的sql违反的数据库相对应的算法,他认为你的不合理</li><li>在这里就不详细解释了 当大家出现后可以百度相对应的信息 <a href="https://blog.csdn.net/poxiaonie/article/details/77757471" target="_blank" rel="noopener">MySQL中explain执行计划中额外信息字段(Extra)详解</a></li></ul></li></ol><p>那么根据这些信息我们可以查到需要优化哪些地方</p><p>说完 explain 我们可以再说说 explain extended + show warnings </p><p>在执行explain extended  之后我们在 show warnings 可以看到在数据库中我们sql的执行方式, 我们可以在这个基础上再次进行优化</p><p>我们可以看到sql的执行方式，对于分析sql还是很有帮助的。</p><p>( 8 ) SELECT ( 9 ) DISTINCT ( 11 ) &lt; Top Num &gt; &lt; select list &gt; </p><p>( 1 ) FROM [ left_table ] </p><p>( 3 ) &lt; join_type &gt; JOIN &lt; right_table &gt; </p><p>( 2 ) ON &lt; join_condition &gt; </p><p>( 4 ) WHERE &lt; where_condition &gt; </p><p>( 5 ) GROUP BY &lt; group_by_list &gt; </p><p>( 6 ) WITH &lt; CUBE | RollUP &gt; </p><p>( 7 ) HAVING &lt; having_condition &gt; </p><p>( 10 ) ORDER BY &lt; order_by_list &gt;</p><p>从优先级我们可以看出为什么order by 排序在 group by 之前不生效了</p><p>之前那条sql之后后数据库warnings的执行方式是下面这样的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`id`</span> <span class="keyword">AS</span> <span class="string">`id`</span>,</span><br><span class="line">        <span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`name`</span>,</span><br><span class="line">        <span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`sex`</span> <span class="keyword">AS</span> <span class="string">`sex`</span>,</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`zwkj_zhxt`</span>.<span class="string">`professor`</span> <span class="string">`a`</span></span><br><span class="line"><span class="keyword">WHERE</span> ((<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`status`</span> = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">AND</span> (<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`polling_status`</span> = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">AND</span> (<span class="keyword">not</span>(<span class="keyword">exists</span>(<span class="comment">/* select#2 */</span><span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`zwkj_zhxt`</span>.<span class="string">`sys_attend`</span> <span class="string">`b`</span></span><br><span class="line"><span class="keyword">WHERE</span> ((<span class="string">`zwkj_zhxt`</span>.<span class="string">`b`</span>.<span class="string">`table_id`</span> = <span class="number">93353728</span>)</span><br><span class="line">        <span class="keyword">AND</span> (<span class="string">`zwkj_zhxt`</span>.<span class="string">`b`</span>.<span class="string">`sex`</span> = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">AND</span> (<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`id`</span> = <span class="string">`zwkj_zhxt`</span>.<span class="string">`b`</span>.<span class="string">`professor_id`</span>)))))</span><br><span class="line">        <span class="keyword">AND</span> ((<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`name`</span> = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">OR</span> (<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`name`</span> = <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">AND</span> ((<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`sex`</span> <span class="keyword">IN</span> (<span class="number">4</span>,<span class="number">7</span>))</span><br><span class="line">        <span class="keyword">OR</span> (<span class="string">`zwkj_zhxt`</span>.<span class="string">`a`</span>.<span class="string">`sex`</span> <span class="keyword">IN</span> (<span class="number">4</span>,<span class="number">7</span>)))) <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>从上面还可以看出 and 的优先级 总是高于 or </p><p>但有一点需要注意的是 exteneded得到的sql并不是 最终优化执行的sql<br>这一点可以在官方文档中得到确认<a href="https://dev.mysql.com/doc/refman/8.0/en/explain-extended.html" target="_blank" rel="noopener">Extended EXPLAIN Output Format</a><br>但从优化的角度上来讲也能帮助我们.</p><p>一般企业数据库的优化 基本上是</p><p>配硬件+差不多的sql优化+分布式+分库分表+读写分离</p><p>等等 反正一系列的操作 基本满足80%的业务场景</p><p>当然我们优化个别业务需要根据实际场景来优化</p><p>如果确实说需要高级别的维护和优化 公司会有相对应的运维或者DB来做很少需要开发者担心</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本质上来讲 sql优化和数据库优化是两种优化&lt;/p&gt;
&lt;p&gt;数据库优化包含的种类较多 软件优化,硬件优化&lt;/p&gt;
&lt;p&gt;理论上 单个mysql数据库能够支撑的是每秒2000的并发 极限是5000&lt;/p&gt;
&lt;p&gt;当然本次不说数据库优化 先说sql优化&lt;/p&gt;
&lt;p&gt;sql优化
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="db" scheme="http://yoursite.com/categories/java/db/"/>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="db" scheme="http://yoursite.com/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>launchctl自动化脚本</title>
    <link href="http://yoursite.com/2019/04/18/macLaunchctl/"/>
    <id>http://yoursite.com/2019/04/18/macLaunchctl/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2020-04-08T06:43:46.133Z</updated>
    
    <content type="html"><![CDATA[<p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl start con.hki.zhxtgit.plist</span><br></pre></td></tr></table></figure></p><p>查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl list | grep &apos;con&apos;</span><br></pre></td></tr></table></figure></p><p>加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load -w con.hki.zhxtgit.plist</span><br></pre></td></tr></table></figure></p><p>卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl unload con.hki.zhxtgit.plist</span><br></pre></td></tr></table></figure></p><p>校验语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plutil -lint  com.hki.zhxtgit.plist</span><br></pre></td></tr></table></figure></p><p>plist文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>con.hki.zhxtgit.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Documents/shell/zhxtgit.sh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Documents/shell/run.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Documents/shell/run.err<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>15<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>5<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;启动&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="自动化脚本" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>git stash 在多分支下的使用</title>
    <link href="http://yoursite.com/2019/03/08/git_stash/"/>
    <id>http://yoursite.com/2019/03/08/git_stash/</id>
    <published>2019-03-07T16:00:00.000Z</published>
    <updated>2020-04-24T01:13:27.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>stash命令叫暂存 平常开发很多情况都会遇到 开发一半的代码线上环境要紧急修复个bug这个时候我们可以把代码暂存起来</p><p>常用的有</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gsta=<span class="string">'git stash save'</span></span><br><span class="line"></span><br><span class="line">gstaa=<span class="string">'git stash apply'</span></span><br><span class="line"></span><br><span class="line">gstc=<span class="string">'git stash clear'</span></span><br><span class="line"></span><br><span class="line">gstd=<span class="string">'git stash drop'</span></span><br><span class="line"></span><br><span class="line">gstl=<span class="string">'git stash list'</span></span><br><span class="line"></span><br><span class="line">gstp=<span class="string">'git stash pop'</span></span><br><span class="line"></span><br><span class="line">gsts=<span class="string">'git stash show --text'</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这一段时间频繁在各个分支上开发及修改bug导致用到的stash命令挺多的</p><p>最近出现一个挺让我纠结的问题就是 在各个分支下stash存放的栈是一样的所以在dev分支下和master分支下你保存的数据都是一个地方 </p><p>如果你在dev 下save了stash 然后切换master分支你仍然可以apply到你刚刚在dev下保存的代码</p><p>下面我们看具体代码</p><h1 id="2-出现原因"><a href="#2-出现原因" class="headerlink" title="2. 出现原因"></a>2. 出现原因</h1><p>现在我们文件下有两个文档 123 和 abc </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master &gt; ll</span><br><span class="line">-rw-r--r--  1 apple  staff    21B  4 23 15:30 123.txt</span><br><span class="line">-rw-r--r--  1 apple  staff    66B 10 29 10:44 abc.txt</span><br></pre></td></tr></table></figure><p>现在我们删除一个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master &gt; rm -rf abc.txt</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 apple  staff    21B  4 23 15:30 123.txt</span><br></pre></td></tr></table></figure><p>不提交当前代码 stash保存起来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master &gt; git stash save <span class="string">"master save"</span></span><br><span class="line">Saved working directory and index state On master: master save</span><br></pre></td></tr></table></figure><p>切换到生产分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">master &gt; git checkout prod</span><br><span class="line">切换到分支 <span class="string">'prod'</span></span><br><span class="line">prod &gt; ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r--  1 apple  staff    21B  4 23 15:30 123.txt</span><br><span class="line">-rw-r--r--  1 apple  staff   121B  4 23 16:11 abc.txt</span><br></pre></td></tr></table></figure><p>再次修改代码 并且stash保存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> prod &gt; vi 123.txt</span><br><span class="line"> prod &gt; git stash save <span class="string">"prod save"</span></span><br><span class="line">Saved working directory and index state On prod: prod save</span><br></pre></td></tr></table></figure><p>切换分支查看stash list</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">master &gt; git checkout master</span><br><span class="line">切换到分支 <span class="string">'master'</span></span><br><span class="line">master &gt; git stash list</span><br><span class="line">stash@&#123;0&#125;: On prod: prod save</span><br><span class="line">stash@&#123;1&#125;: On master: master save</span><br></pre></td></tr></table></figure><p>这个时候显示出了两个保存栈 分别是我在master和prod上保存的代码</p><p>如果这个时候你直接git stash apply 会使用最近的一个 也就是你在prod下保存的代码而不是你master的代码</p><h1 id="3-优化使用"><a href="#3-优化使用" class="headerlink" title="3. 优化使用"></a>3. 优化使用</h1><p>Stash 有两种保存方式 一种是带消息保存和不带消息保存 上面我演示的是带消息所以能看出来我保存的是哪个分支</p><p>所以在使用satsh的时候最好带上当前保存的一个标记语 这样方便我们下次使用的时候拉取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash save <span class="string">"markword"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;p&gt;stash命令叫暂存 平常开发很多情况都会遇到 开发一半的代码线上环境要紧急修复个bug这个时候我们可以把代码暂存起来&lt;
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/git/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Quartz cron语法规则及demo</title>
    <link href="http://yoursite.com/2018/12/29/quartzCron/"/>
    <id>http://yoursite.com/2018/12/29/quartzCron/</id>
    <published>2018-12-28T16:00:00.000Z</published>
    <updated>2020-04-08T06:44:10.589Z</updated>
    
    <content type="html"><![CDATA[<p>测试在线地址</p><p><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a> </p><p>下面是一些demo</p><p>每天凌晨2点  0 0 2 <em> </em> ?和每天隔一小时 0 <em> </em>/1 <em> </em> ?</p><p>例1：每隔5秒执行一次：<em>/5 </em> <em> </em> * ?</p><p>例2：每隔5分执行一次：0 <em>/5 </em> <em> </em> ?</p><p>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?</p><p>例3：每天半夜12点30分执行一次：0 30 0 <em> </em> ? （注意日期域为0不是24）</p><p>每天凌晨1点执行一次：0 0 1 <em> </em> ?</p><p>每天上午10：15执行一次： 0 15 10 ? <em> </em> 或 0 15 10 <em> </em> ? 或 0 15 10 <em> </em> ? *</p><p>每天中午十二点执行一次：0 0 12 <em> </em> ?</p><p>每天14点到14：59分，每1分钟执行一次：0 <em> 14 </em> * ?</p><p>每天14点到14：05分，每1分钟执行一次：0 0-5 14 <em> </em> ?</p><p>每天14点到14：55分，每5分钟执行一次：0 0/5 14 <em> </em> ?</p><p>每天14点到14：55分，和18点到18点55分，每5分钟执行一次：0 0/5 14,18 <em> </em> ?</p><p>每天18点执行一次：0 0 18 <em> </em> ?</p><p>每天18点、22点执行一次：0 0 18,22 <em> </em> ?</p><p>每天7点到23点，每整点执行一次：0 0 7-23 <em> </em> ?</p><p>每个整点执行一次：0 0 0/1 <em> </em> ?</p><p>每天凌晨2点  0 0 2 <em> </em> ?和每天隔一小时 0 <em> </em>/1 <em> </em> ?</p><p>例1：每隔5秒执行一次：<em>/5 </em> <em> </em> * ?</p><p>例2：每隔5分执行一次：0 <em>/5 </em> <em> </em> ?</p><p>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?</p><p>例3：每天半夜12点30分执行一次：0 30 0 <em> </em> ? （注意日期域为0不是24）</p><p>每天凌晨1点执行一次：0 0 1 <em> </em> ?</p><p>每天上午10：15执行一次： 0 15 10 ? <em> </em> 或 0 15 10 <em> </em> ? 或 0 15 10 <em> </em> ? *</p><p>每天中午十二点执行一次：0 0 12 <em> </em> ?</p><p>每天14点到14：59分，每1分钟执行一次：0 <em> 14 </em> * ?</p><p>每天14点到14：05分，每1分钟执行一次：0 0-5 14 <em> </em> ?</p><p>每天14点到14：55分，每5分钟执行一次：0 0/5 14 <em> </em> ?</p><p>每天14点到14：55分，和18点到18点55分，每5分钟执行一次：0 0/5 14,18 <em> </em> ?</p><p>每天18点执行一次：0 0 18 <em> </em> ?</p><p>每天18点、22点执行一次：0 0 18,22 <em> </em> ?</p><p>每天7点到23点，每整点执行一次：0 0 7-23 <em> </em> ?</p><p>每个整点执行一次：0 0 0/1 <em> </em> ?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试在线地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cron.qqe2.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cron.qqe2.com/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;下面是一些demo&lt;/p&gt;
&lt;p&gt;每天凌晨2点  0
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
</feed>
